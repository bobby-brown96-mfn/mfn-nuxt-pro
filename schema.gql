# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountType {
  accountCategory: AccountTypeCategory!
  book: Book!
  bookId: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  glAccounts: [GlAccount!]

  """
  Generated Instance CUID
  """
  id: ID!
  name: String!
  system: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

input AccountTypeBookIdNameCompoundUniqueInput {
  bookId: String!
  name: String!
}

enum AccountTypeCategory {
  ASSET
  EQUITY
  EXPENSE
  LIABILITY
  REVENUE
}

type AccountTypeCountAggregate {
  _all: Int!
  accountCategory: Int!
  bookId: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  system: Int!
  updatedAt: Int!
}

input AccountTypeCreateManyBookInput {
  accountCategory: AccountTypeCategory!
  name: String!
  system: Boolean
}

input AccountTypeCreateManyBookInputEnvelope {
  data: [AccountTypeCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input AccountTypeCreateNestedManyWithoutBookInput {
  connect: [AccountTypeWhereUniqueInput!]
  connectOrCreate: [AccountTypeCreateOrConnectWithoutBookInput!]
  create: [AccountTypeCreateWithoutBookInput!]
  createMany: AccountTypeCreateManyBookInputEnvelope
}

input AccountTypeCreateNestedOneWithoutGlAccountsInput {
  connect: AccountTypeWhereUniqueInput
  connectOrCreate: AccountTypeCreateOrConnectWithoutGlAccountsInput
  create: AccountTypeCreateWithoutGlAccountsInput
}

input AccountTypeCreateOrConnectWithoutBookInput {
  create: AccountTypeCreateWithoutBookInput!
  where: AccountTypeWhereUniqueInput!
}

input AccountTypeCreateOrConnectWithoutGlAccountsInput {
  create: AccountTypeCreateWithoutGlAccountsInput!
  where: AccountTypeWhereUniqueInput!
}

input AccountTypeCreateWithoutBookInput {
  accountCategory: AccountTypeCategory!
  glAccounts: GlAccountCreateNestedManyWithoutAccountTypeInput
  name: String!
  system: Boolean
}

input AccountTypeCreateWithoutGlAccountsInput {
  accountCategory: AccountTypeCategory!
  book: BookCreateNestedOneWithoutAccountTypesInput!
  name: String!
  system: Boolean
}

input AccountTypeFindInput {
  id: String
  name: String
}

input AccountTypeListRelationFilter {
  every: AccountTypeWhereInput
  none: AccountTypeWhereInput
  some: AccountTypeWhereInput
}

type AccountTypeMaxAggregate {
  accountCategory: AccountTypeCategory
  bookId: String
  createdAt: DateTime
  id: String
  name: String
  system: Boolean
  updatedAt: DateTime
}

type AccountTypeMinAggregate {
  accountCategory: AccountTypeCategory
  bookId: String
  createdAt: DateTime
  id: String
  name: String
  system: Boolean
  updatedAt: DateTime
}

input AccountTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountTypeOrderByWithRelationInput {
  accountCategory: SortOrder
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  glAccounts: GlAccountOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  system: SortOrder
  updatedAt: SortOrder
}

input AccountTypeRelationFilter {
  is: AccountTypeWhereInput
  isNot: AccountTypeWhereInput
}

enum AccountTypeScalarFieldEnum {
  accountCategory
  bookId
  createdAt
  id
  name
  system
  updatedAt
}

input AccountTypeScalarWhereInput {
  AND: [AccountTypeScalarWhereInput!]
  NOT: [AccountTypeScalarWhereInput!]
  OR: [AccountTypeScalarWhereInput!]
  accountCategory: EnumAccountTypeCategoryFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  system: BoolFilter
  updatedAt: DateTimeFilter
}

input AccountTypeUpdateManyMutationInput {
  accountCategory: AccountTypeCategory
  name: String
  system: Boolean
}

input AccountTypeUpdateManyWithWhereWithoutBookInput {
  data: AccountTypeUpdateManyMutationInput!
  where: AccountTypeScalarWhereInput!
}

input AccountTypeUpdateManyWithoutBookNestedInput {
  connect: [AccountTypeWhereUniqueInput!]
  connectOrCreate: [AccountTypeCreateOrConnectWithoutBookInput!]
  create: [AccountTypeCreateWithoutBookInput!]
  createMany: AccountTypeCreateManyBookInputEnvelope
  delete: [AccountTypeWhereUniqueInput!]
  deleteMany: [AccountTypeScalarWhereInput!]
  disconnect: [AccountTypeWhereUniqueInput!]
  set: [AccountTypeWhereUniqueInput!]
  update: [AccountTypeUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [AccountTypeUpdateManyWithWhereWithoutBookInput!]
  upsert: [AccountTypeUpsertWithWhereUniqueWithoutBookInput!]
}

input AccountTypeUpdateOneRequiredWithoutGlAccountsNestedInput {
  connect: AccountTypeWhereUniqueInput
  connectOrCreate: AccountTypeCreateOrConnectWithoutGlAccountsInput
  create: AccountTypeCreateWithoutGlAccountsInput
  update: AccountTypeUpdateToOneWithWhereWithoutGlAccountsInput
  upsert: AccountTypeUpsertWithoutGlAccountsInput
}

input AccountTypeUpdateToOneWithWhereWithoutGlAccountsInput {
  data: AccountTypeUpdateWithoutGlAccountsInput!
  where: AccountTypeWhereInput
}

input AccountTypeUpdateWithWhereUniqueWithoutBookInput {
  data: AccountTypeUpdateWithoutBookInput!
  where: AccountTypeWhereUniqueInput!
}

input AccountTypeUpdateWithoutBookInput {
  accountCategory: AccountTypeCategory
  glAccounts: GlAccountUpdateManyWithoutAccountTypeNestedInput
  name: String
  system: Boolean
}

input AccountTypeUpdateWithoutGlAccountsInput {
  accountCategory: AccountTypeCategory
  book: BookUpdateOneRequiredWithoutAccountTypesNestedInput
  name: String
  system: Boolean
}

input AccountTypeUpsertWithWhereUniqueWithoutBookInput {
  create: AccountTypeCreateWithoutBookInput!
  update: AccountTypeUpdateWithoutBookInput!
  where: AccountTypeWhereUniqueInput!
}

input AccountTypeUpsertWithoutGlAccountsInput {
  create: AccountTypeCreateWithoutGlAccountsInput!
  update: AccountTypeUpdateWithoutGlAccountsInput!
  where: AccountTypeWhereInput
}

input AccountTypeWhereInput {
  AND: [AccountTypeWhereInput!]
  NOT: [AccountTypeWhereInput!]
  OR: [AccountTypeWhereInput!]
  accountCategory: EnumAccountTypeCategoryFilter
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  glAccounts: GlAccountListRelationFilter
  id: StringFilter
  name: StringFilter
  system: BoolFilter
  updatedAt: DateTimeFilter
}

input AccountTypeWhereUniqueInput {
  AND: [AccountTypeWhereInput!]
  NOT: [AccountTypeWhereInput!]
  OR: [AccountTypeWhereInput!]
  accountCategory: EnumAccountTypeCategoryFilter
  book: BookRelationFilter
  bookId: StringFilter
  bookId_name: AccountTypeBookIdNameCompoundUniqueInput
  createdAt: DateTimeFilter
  glAccounts: GlAccountListRelationFilter
  id: String
  name: StringFilter
  system: BoolFilter
  updatedAt: DateTimeFilter
}

type AuthSession {
  access_token: String!
  activeBook: Book
  activeBookId: String
  activeUser: User!
  activeUserId: String!
  refresh_token: String!
}

type AuthSessionStatus {
  activeBook: Book
  activeBookId: String
  activeUser: User!
  activeUserId: String!
}

type BaseBookResult {
  bookNumber: Int!
  envType: BookEnvironmentType!

  """
  Generated Instance CUID
  """
  id: ID!
  isSeeded: Boolean!
  name: String!
  system: Boolean!
}

type Book {
  _count: BookCount!
  accountTypes: [AccountType!]
  activeCurrencies: [Currency!]
  bookEntities: [BookEntity!]
  bookNumber: Int!
  connectedBookUsers: [BookUser!]

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  envType: BookEnvironmentType!
  glAccounts: [GlAccount!]

  """
  Generated Instance CUID
  """
  id: ID!
  isActive: Boolean!
  isSeeded: Boolean!
  name: String!
  periods: [Period!]
  primaryCurrency: Currency!
  primaryCurrencyCode: String!
  system: Boolean!
  systemUser: User!
  systemUserId: String!
  transactionLines: [TransactionLine!]
  transactionTypes: [TransactionType!]
  transactions: [Transaction!]

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

type BookAvgAggregate {
  bookNumber: Float
}

type BookCount {
  accountTypes: Int!
  activeCurrencies: Int!
  bookEntities: Int!
  connectedBookUsers: Int!
  glAccounts: Int!
  periods: Int!
  transactionLines: Int!
  transactionTypes: Int!
  transactions: Int!
}

type BookCountAggregate {
  _all: Int!
  bookNumber: Int!
  createdAt: Int!
  envType: Int!
  id: Int!
  isActive: Int!
  isSeeded: Int!
  name: Int!
  primaryCurrencyCode: Int!
  system: Int!
  systemUserId: Int!
  updatedAt: Int!
}

input BookCreateManyPrimaryCurrencyInput {
  bookNumber: Int!
  envType: BookEnvironmentType!
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  system: Boolean
  systemUserId: String!
}

input BookCreateManyPrimaryCurrencyInputEnvelope {
  data: [BookCreateManyPrimaryCurrencyInput!]!
  skipDuplicates: Boolean
}

input BookCreateManySystemUserInput {
  bookNumber: Int!
  envType: BookEnvironmentType!
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  primaryCurrencyCode: String!
  system: Boolean
}

input BookCreateManySystemUserInputEnvelope {
  data: [BookCreateManySystemUserInput!]!
  skipDuplicates: Boolean
}

input BookCreateNestedManyWithoutActiveCurrenciesInput {
  connect: [BookWhereUniqueInput!]
  connectOrCreate: [BookCreateOrConnectWithoutActiveCurrenciesInput!]
  create: [BookCreateWithoutActiveCurrenciesInput!]
}

input BookCreateNestedManyWithoutPrimaryCurrencyInput {
  connect: [BookWhereUniqueInput!]
  connectOrCreate: [BookCreateOrConnectWithoutPrimaryCurrencyInput!]
  create: [BookCreateWithoutPrimaryCurrencyInput!]
  createMany: BookCreateManyPrimaryCurrencyInputEnvelope
}

input BookCreateNestedManyWithoutSystemUserInput {
  connect: [BookWhereUniqueInput!]
  connectOrCreate: [BookCreateOrConnectWithoutSystemUserInput!]
  create: [BookCreateWithoutSystemUserInput!]
  createMany: BookCreateManySystemUserInputEnvelope
}

input BookCreateNestedOneWithoutAccountTypesInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutAccountTypesInput
  create: BookCreateWithoutAccountTypesInput
}

input BookCreateNestedOneWithoutBookEntitiesInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookEntitiesInput
  create: BookCreateWithoutBookEntitiesInput
}

input BookCreateNestedOneWithoutConnectedBookUsersInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutConnectedBookUsersInput
  create: BookCreateWithoutConnectedBookUsersInput
}

input BookCreateNestedOneWithoutGlAccountsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutGlAccountsInput
  create: BookCreateWithoutGlAccountsInput
}

input BookCreateNestedOneWithoutPeriodsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutPeriodsInput
  create: BookCreateWithoutPeriodsInput
}

input BookCreateNestedOneWithoutTransactionLinesInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutTransactionLinesInput
  create: BookCreateWithoutTransactionLinesInput
}

input BookCreateNestedOneWithoutTransactionTypesInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutTransactionTypesInput
  create: BookCreateWithoutTransactionTypesInput
}

input BookCreateNestedOneWithoutTransactionsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutTransactionsInput
  create: BookCreateWithoutTransactionsInput
}

input BookCreateOrConnectWithoutAccountTypesInput {
  create: BookCreateWithoutAccountTypesInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutActiveCurrenciesInput {
  create: BookCreateWithoutActiveCurrenciesInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutBookEntitiesInput {
  create: BookCreateWithoutBookEntitiesInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutConnectedBookUsersInput {
  create: BookCreateWithoutConnectedBookUsersInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutGlAccountsInput {
  create: BookCreateWithoutGlAccountsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutPeriodsInput {
  create: BookCreateWithoutPeriodsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutPrimaryCurrencyInput {
  create: BookCreateWithoutPrimaryCurrencyInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutSystemUserInput {
  create: BookCreateWithoutSystemUserInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutTransactionLinesInput {
  create: BookCreateWithoutTransactionLinesInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutTransactionTypesInput {
  create: BookCreateWithoutTransactionTypesInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutTransactionsInput {
  create: BookCreateWithoutTransactionsInput!
  where: BookWhereUniqueInput!
}

input BookCreateWithoutAccountTypesInput {
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutActiveCurrenciesInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutBookEntitiesInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutConnectedBookUsersInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutGlAccountsInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutPeriodsInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutPrimaryCurrencyInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutSystemUserInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutTransactionLinesInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutTransactionTypesInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactions: TransactionCreateNestedManyWithoutBookInput
}

input BookCreateWithoutTransactionsInput {
  accountTypes: AccountTypeCreateNestedManyWithoutBookInput
  activeCurrencies: CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput
  bookEntities: BookEntityCreateNestedManyWithoutBookInput
  bookNumber: Int!
  connectedBookUsers: BookUserCreateNestedManyWithoutBookInput
  envType: BookEnvironmentType!
  glAccounts: GlAccountCreateNestedManyWithoutBookInput
  isActive: Boolean
  isSeeded: Boolean
  name: String!
  periods: PeriodCreateNestedManyWithoutBookInput
  primaryCurrency: CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput!
  system: Boolean
  systemUser: UserCreateNestedOneWithoutSystemUserBooksInput!
  transactionLines: TransactionLineCreateNestedManyWithoutBookInput
  transactionTypes: TransactionTypeCreateNestedManyWithoutBookInput
}

type BookEntity {
  book: Book!
  bookId: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  createdBy: BookUser!
  createdById: String!
  defaultAccount: GlAccount
  defaultAccountNumber: Int
  entityId: Int!
  entityType: EntityType!

  """
  Generated Instance CUID
  """
  id: ID!
  isActive: Boolean!
  name: String!
  system: Boolean!
  transactionLines: [TransactionLine!]

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

type BookEntityAvgAggregate {
  defaultAccountNumber: Float
  entityId: Float
}

type BookEntityCountAggregate {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  createdById: Int!
  defaultAccountNumber: Int!
  entityId: Int!
  entityType: Int!
  id: Int!
  isActive: Int!
  name: Int!
  system: Int!
  updatedAt: Int!
}

input BookEntityCreateManyBookInput {
  createdById: String!
  defaultAccountNumber: Int
  entityId: Int
  entityType: EntityType!
  isActive: Boolean
  name: String!
  system: Boolean
}

input BookEntityCreateManyBookInputEnvelope {
  data: [BookEntityCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input BookEntityCreateManyCreatedByInput {
  defaultAccountNumber: Int
  entityId: Int
  entityType: EntityType!
  isActive: Boolean
  name: String!
  system: Boolean
}

input BookEntityCreateManyCreatedByInputEnvelope {
  data: [BookEntityCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input BookEntityCreateManyDefaultAccountInput {
  createdById: String!
  entityId: Int
  entityType: EntityType!
  isActive: Boolean
  name: String!
  system: Boolean
}

input BookEntityCreateManyDefaultAccountInputEnvelope {
  data: [BookEntityCreateManyDefaultAccountInput!]!
  skipDuplicates: Boolean
}

input BookEntityCreateNestedManyWithoutBookInput {
  connect: [BookEntityWhereUniqueInput!]
  connectOrCreate: [BookEntityCreateOrConnectWithoutBookInput!]
  create: [BookEntityCreateWithoutBookInput!]
  createMany: BookEntityCreateManyBookInputEnvelope
}

input BookEntityCreateNestedManyWithoutCreatedByInput {
  connect: [BookEntityWhereUniqueInput!]
  connectOrCreate: [BookEntityCreateOrConnectWithoutCreatedByInput!]
  create: [BookEntityCreateWithoutCreatedByInput!]
  createMany: BookEntityCreateManyCreatedByInputEnvelope
}

input BookEntityCreateNestedManyWithoutDefaultAccountInput {
  connect: [BookEntityWhereUniqueInput!]
  connectOrCreate: [BookEntityCreateOrConnectWithoutDefaultAccountInput!]
  create: [BookEntityCreateWithoutDefaultAccountInput!]
  createMany: BookEntityCreateManyDefaultAccountInputEnvelope
}

input BookEntityCreateNestedOneWithoutTransactionLinesInput {
  connect: BookEntityWhereUniqueInput
  connectOrCreate: BookEntityCreateOrConnectWithoutTransactionLinesInput
  create: BookEntityCreateWithoutTransactionLinesInput
}

input BookEntityCreateOrConnectWithoutBookInput {
  create: BookEntityCreateWithoutBookInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityCreateOrConnectWithoutCreatedByInput {
  create: BookEntityCreateWithoutCreatedByInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityCreateOrConnectWithoutDefaultAccountInput {
  create: BookEntityCreateWithoutDefaultAccountInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityCreateOrConnectWithoutTransactionLinesInput {
  create: BookEntityCreateWithoutTransactionLinesInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityCreateWithoutBookInput {
  createdBy: BookUserCreateNestedOneWithoutCreatedBookEntitiesInput!
  defaultAccount: GlAccountCreateNestedOneWithoutBookEntityDefaultsInput
  entityId: Int
  entityType: EntityType!
  isActive: Boolean
  name: String!
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutEntityInput
}

input BookEntityCreateWithoutCreatedByInput {
  book: BookCreateNestedOneWithoutBookEntitiesInput!
  defaultAccount: GlAccountCreateNestedOneWithoutBookEntityDefaultsInput
  entityId: Int
  entityType: EntityType!
  isActive: Boolean
  name: String!
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutEntityInput
}

input BookEntityCreateWithoutDefaultAccountInput {
  book: BookCreateNestedOneWithoutBookEntitiesInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedBookEntitiesInput!
  entityId: Int
  entityType: EntityType!
  isActive: Boolean
  name: String!
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutEntityInput
}

input BookEntityCreateWithoutTransactionLinesInput {
  book: BookCreateNestedOneWithoutBookEntitiesInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedBookEntitiesInput!
  defaultAccount: GlAccountCreateNestedOneWithoutBookEntityDefaultsInput
  entityId: Int
  entityType: EntityType!
  isActive: Boolean
  name: String!
  system: Boolean
}

input BookEntityEntityIdBookIdCompoundUniqueInput {
  bookId: String!
  entityId: Int!
}

input BookEntityFindInput {
  entityId: Int
  id: String
  name: String
}

input BookEntityIdBookIdCompoundUniqueInput {
  bookId: String!
  id: String!
}

input BookEntityListRelationFilter {
  every: BookEntityWhereInput
  none: BookEntityWhereInput
  some: BookEntityWhereInput
}

type BookEntityMaxAggregate {
  bookId: String
  createdAt: DateTime
  createdById: String
  defaultAccountNumber: Int
  entityId: Int
  entityType: EntityType
  id: String
  isActive: Boolean
  name: String
  system: Boolean
  updatedAt: DateTime
}

type BookEntityMinAggregate {
  bookId: String
  createdAt: DateTime
  createdById: String
  defaultAccountNumber: Int
  entityId: Int
  entityType: EntityType
  id: String
  isActive: Boolean
  name: String
  system: Boolean
  updatedAt: DateTime
}

input BookEntityNameBookIdCompoundUniqueInput {
  bookId: String!
  name: String!
}

input BookEntityNullableRelationFilter {
  is: BookEntityWhereInput
  isNot: BookEntityWhereInput
}

input BookEntityOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookEntityOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  createdBy: BookUserOrderByWithRelationInput
  createdById: SortOrder
  defaultAccount: GlAccountOrderByWithRelationInput
  defaultAccountNumber: SortOrderInput
  entityId: SortOrder
  entityType: SortOrder
  id: SortOrder
  isActive: SortOrder
  name: SortOrder
  system: SortOrder
  transactionLines: TransactionLineOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum BookEntityScalarFieldEnum {
  bookId
  createdAt
  createdById
  defaultAccountNumber
  entityId
  entityType
  id
  isActive
  name
  system
  updatedAt
}

input BookEntityScalarWhereInput {
  AND: [BookEntityScalarWhereInput!]
  NOT: [BookEntityScalarWhereInput!]
  OR: [BookEntityScalarWhereInput!]
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  defaultAccountNumber: IntNullableFilter
  entityId: IntFilter
  entityType: EnumEntityTypeFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  system: BoolFilter
  updatedAt: DateTimeFilter
}

type BookEntitySumAggregate {
  defaultAccountNumber: Int
  entityId: Int
}

input BookEntityUpdateManyMutationInput {
  entityId: Int
  entityType: EntityType
  isActive: Boolean
  name: String
  system: Boolean
}

input BookEntityUpdateManyWithWhereWithoutBookInput {
  data: BookEntityUpdateManyMutationInput!
  where: BookEntityScalarWhereInput!
}

input BookEntityUpdateManyWithWhereWithoutCreatedByInput {
  data: BookEntityUpdateManyMutationInput!
  where: BookEntityScalarWhereInput!
}

input BookEntityUpdateManyWithWhereWithoutDefaultAccountInput {
  data: BookEntityUpdateManyMutationInput!
  where: BookEntityScalarWhereInput!
}

input BookEntityUpdateManyWithoutBookNestedInput {
  connect: [BookEntityWhereUniqueInput!]
  connectOrCreate: [BookEntityCreateOrConnectWithoutBookInput!]
  create: [BookEntityCreateWithoutBookInput!]
  createMany: BookEntityCreateManyBookInputEnvelope
  delete: [BookEntityWhereUniqueInput!]
  deleteMany: [BookEntityScalarWhereInput!]
  disconnect: [BookEntityWhereUniqueInput!]
  set: [BookEntityWhereUniqueInput!]
  update: [BookEntityUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [BookEntityUpdateManyWithWhereWithoutBookInput!]
  upsert: [BookEntityUpsertWithWhereUniqueWithoutBookInput!]
}

input BookEntityUpdateManyWithoutCreatedByNestedInput {
  connect: [BookEntityWhereUniqueInput!]
  connectOrCreate: [BookEntityCreateOrConnectWithoutCreatedByInput!]
  create: [BookEntityCreateWithoutCreatedByInput!]
  createMany: BookEntityCreateManyCreatedByInputEnvelope
  delete: [BookEntityWhereUniqueInput!]
  deleteMany: [BookEntityScalarWhereInput!]
  disconnect: [BookEntityWhereUniqueInput!]
  set: [BookEntityWhereUniqueInput!]
  update: [BookEntityUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [BookEntityUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [BookEntityUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BookEntityUpdateManyWithoutDefaultAccountNestedInput {
  connect: [BookEntityWhereUniqueInput!]
  connectOrCreate: [BookEntityCreateOrConnectWithoutDefaultAccountInput!]
  create: [BookEntityCreateWithoutDefaultAccountInput!]
  createMany: BookEntityCreateManyDefaultAccountInputEnvelope
  delete: [BookEntityWhereUniqueInput!]
  deleteMany: [BookEntityScalarWhereInput!]
  disconnect: [BookEntityWhereUniqueInput!]
  set: [BookEntityWhereUniqueInput!]
  update: [BookEntityUpdateWithWhereUniqueWithoutDefaultAccountInput!]
  updateMany: [BookEntityUpdateManyWithWhereWithoutDefaultAccountInput!]
  upsert: [BookEntityUpsertWithWhereUniqueWithoutDefaultAccountInput!]
}

input BookEntityUpdateOneWithoutTransactionLinesNestedInput {
  connect: BookEntityWhereUniqueInput
  connectOrCreate: BookEntityCreateOrConnectWithoutTransactionLinesInput
  create: BookEntityCreateWithoutTransactionLinesInput
  delete: BookEntityWhereInput
  disconnect: BookEntityWhereInput
  update: BookEntityUpdateToOneWithWhereWithoutTransactionLinesInput
  upsert: BookEntityUpsertWithoutTransactionLinesInput
}

input BookEntityUpdateToOneWithWhereWithoutTransactionLinesInput {
  data: BookEntityUpdateWithoutTransactionLinesInput!
  where: BookEntityWhereInput
}

input BookEntityUpdateWithWhereUniqueWithoutBookInput {
  data: BookEntityUpdateWithoutBookInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityUpdateWithWhereUniqueWithoutCreatedByInput {
  data: BookEntityUpdateWithoutCreatedByInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityUpdateWithWhereUniqueWithoutDefaultAccountInput {
  data: BookEntityUpdateWithoutDefaultAccountInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityUpdateWithoutBookInput {
  createdBy: BookUserUpdateOneRequiredWithoutCreatedBookEntitiesNestedInput
  defaultAccount: GlAccountUpdateOneWithoutBookEntityDefaultsNestedInput
  entityId: Int
  entityType: EntityType
  isActive: Boolean
  name: String
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutEntityNestedInput
}

input BookEntityUpdateWithoutCreatedByInput {
  book: BookUpdateOneRequiredWithoutBookEntitiesNestedInput
  defaultAccount: GlAccountUpdateOneWithoutBookEntityDefaultsNestedInput
  entityId: Int
  entityType: EntityType
  isActive: Boolean
  name: String
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutEntityNestedInput
}

input BookEntityUpdateWithoutDefaultAccountInput {
  book: BookUpdateOneRequiredWithoutBookEntitiesNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedBookEntitiesNestedInput
  entityId: Int
  entityType: EntityType
  isActive: Boolean
  name: String
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutEntityNestedInput
}

input BookEntityUpdateWithoutTransactionLinesInput {
  book: BookUpdateOneRequiredWithoutBookEntitiesNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedBookEntitiesNestedInput
  defaultAccount: GlAccountUpdateOneWithoutBookEntityDefaultsNestedInput
  entityId: Int
  entityType: EntityType
  isActive: Boolean
  name: String
  system: Boolean
}

input BookEntityUpsertWithWhereUniqueWithoutBookInput {
  create: BookEntityCreateWithoutBookInput!
  update: BookEntityUpdateWithoutBookInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityUpsertWithWhereUniqueWithoutCreatedByInput {
  create: BookEntityCreateWithoutCreatedByInput!
  update: BookEntityUpdateWithoutCreatedByInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityUpsertWithWhereUniqueWithoutDefaultAccountInput {
  create: BookEntityCreateWithoutDefaultAccountInput!
  update: BookEntityUpdateWithoutDefaultAccountInput!
  where: BookEntityWhereUniqueInput!
}

input BookEntityUpsertWithoutTransactionLinesInput {
  create: BookEntityCreateWithoutTransactionLinesInput!
  update: BookEntityUpdateWithoutTransactionLinesInput!
  where: BookEntityWhereInput
}

input BookEntityWhereInput {
  AND: [BookEntityWhereInput!]
  NOT: [BookEntityWhereInput!]
  OR: [BookEntityWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  defaultAccount: GlAccountNullableRelationFilter
  defaultAccountNumber: IntNullableFilter
  entityId: IntFilter
  entityType: EnumEntityTypeFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  system: BoolFilter
  transactionLines: TransactionLineListRelationFilter
  updatedAt: DateTimeFilter
}

input BookEntityWhereUniqueInput {
  AND: [BookEntityWhereInput!]
  NOT: [BookEntityWhereInput!]
  OR: [BookEntityWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  defaultAccount: GlAccountNullableRelationFilter
  defaultAccountNumber: IntNullableFilter
  entityId: IntFilter
  entityId_bookId: BookEntityEntityIdBookIdCompoundUniqueInput
  entityType: EnumEntityTypeFilter
  id: String
  id_bookId: BookEntityIdBookIdCompoundUniqueInput
  isActive: BoolFilter
  name: StringFilter
  name_bookId: BookEntityNameBookIdCompoundUniqueInput
  system: BoolFilter
  transactionLines: TransactionLineListRelationFilter
  updatedAt: DateTimeFilter
}

enum BookEnvironmentType {
  DEVELOPMENT
  LOCAL
  PRODUCTION
  SANDBOX
}

input BookFindInput {
  bookNumber: Int
  envType: BookEnvironmentType
  id: String
}

input BookListRelationFilter {
  every: BookWhereInput
  none: BookWhereInput
  some: BookWhereInput
}

type BookMaxAggregate {
  bookNumber: Int
  createdAt: DateTime
  envType: BookEnvironmentType
  id: String
  isActive: Boolean
  isSeeded: Boolean
  name: String
  primaryCurrencyCode: String
  system: Boolean
  systemUserId: String
  updatedAt: DateTime
}

type BookMinAggregate {
  bookNumber: Int
  createdAt: DateTime
  envType: BookEnvironmentType
  id: String
  isActive: Boolean
  isSeeded: Boolean
  name: String
  primaryCurrencyCode: String
  system: Boolean
  systemUserId: String
  updatedAt: DateTime
}

input BookOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookOrderByWithRelationInput {
  accountTypes: AccountTypeOrderByRelationAggregateInput
  activeCurrencies: CurrencyOrderByRelationAggregateInput
  bookEntities: BookEntityOrderByRelationAggregateInput
  bookNumber: SortOrder
  connectedBookUsers: BookUserOrderByRelationAggregateInput
  createdAt: SortOrder
  envType: SortOrder
  glAccounts: GlAccountOrderByRelationAggregateInput
  id: SortOrder
  isActive: SortOrder
  isSeeded: SortOrder
  name: SortOrder
  periods: PeriodOrderByRelationAggregateInput
  primaryCurrency: CurrencyOrderByWithRelationInput
  primaryCurrencyCode: SortOrder
  system: SortOrder
  systemUser: UserOrderByWithRelationInput
  systemUserId: SortOrder
  transactionLines: TransactionLineOrderByRelationAggregateInput
  transactionTypes: TransactionTypeOrderByRelationAggregateInput
  transactions: TransactionOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input BookRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

enum BookScalarFieldEnum {
  bookNumber
  createdAt
  envType
  id
  isActive
  isSeeded
  name
  primaryCurrencyCode
  system
  systemUserId
  updatedAt
}

input BookScalarWhereInput {
  AND: [BookScalarWhereInput!]
  NOT: [BookScalarWhereInput!]
  OR: [BookScalarWhereInput!]
  bookNumber: IntFilter
  createdAt: DateTimeFilter
  envType: EnumBookEnvironmentTypeFilter
  id: StringFilter
  isActive: BoolFilter
  isSeeded: BoolFilter
  name: StringFilter
  primaryCurrencyCode: StringFilter
  system: BoolFilter
  systemUserId: StringFilter
  updatedAt: DateTimeFilter
}

type BookSumAggregate {
  bookNumber: Int
}

input BookUpdateManyMutationInput {
  bookNumber: Int
  envType: BookEnvironmentType
  isActive: Boolean
  isSeeded: Boolean
  name: String
  system: Boolean
}

input BookUpdateManyWithWhereWithoutActiveCurrenciesInput {
  data: BookUpdateManyMutationInput!
  where: BookScalarWhereInput!
}

input BookUpdateManyWithWhereWithoutPrimaryCurrencyInput {
  data: BookUpdateManyMutationInput!
  where: BookScalarWhereInput!
}

input BookUpdateManyWithWhereWithoutSystemUserInput {
  data: BookUpdateManyMutationInput!
  where: BookScalarWhereInput!
}

input BookUpdateManyWithoutActiveCurrenciesNestedInput {
  connect: [BookWhereUniqueInput!]
  connectOrCreate: [BookCreateOrConnectWithoutActiveCurrenciesInput!]
  create: [BookCreateWithoutActiveCurrenciesInput!]
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutActiveCurrenciesInput!]
  updateMany: [BookUpdateManyWithWhereWithoutActiveCurrenciesInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutActiveCurrenciesInput!]
}

input BookUpdateManyWithoutPrimaryCurrencyNestedInput {
  connect: [BookWhereUniqueInput!]
  connectOrCreate: [BookCreateOrConnectWithoutPrimaryCurrencyInput!]
  create: [BookCreateWithoutPrimaryCurrencyInput!]
  createMany: BookCreateManyPrimaryCurrencyInputEnvelope
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutPrimaryCurrencyInput!]
  updateMany: [BookUpdateManyWithWhereWithoutPrimaryCurrencyInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutPrimaryCurrencyInput!]
}

input BookUpdateManyWithoutSystemUserNestedInput {
  connect: [BookWhereUniqueInput!]
  connectOrCreate: [BookCreateOrConnectWithoutSystemUserInput!]
  create: [BookCreateWithoutSystemUserInput!]
  createMany: BookCreateManySystemUserInputEnvelope
  delete: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutSystemUserInput!]
  updateMany: [BookUpdateManyWithWhereWithoutSystemUserInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutSystemUserInput!]
}

input BookUpdateOneRequiredWithoutAccountTypesNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutAccountTypesInput
  create: BookCreateWithoutAccountTypesInput
  update: BookUpdateToOneWithWhereWithoutAccountTypesInput
  upsert: BookUpsertWithoutAccountTypesInput
}

input BookUpdateOneRequiredWithoutBookEntitiesNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookEntitiesInput
  create: BookCreateWithoutBookEntitiesInput
  update: BookUpdateToOneWithWhereWithoutBookEntitiesInput
  upsert: BookUpsertWithoutBookEntitiesInput
}

input BookUpdateOneRequiredWithoutConnectedBookUsersNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutConnectedBookUsersInput
  create: BookCreateWithoutConnectedBookUsersInput
  update: BookUpdateToOneWithWhereWithoutConnectedBookUsersInput
  upsert: BookUpsertWithoutConnectedBookUsersInput
}

input BookUpdateOneRequiredWithoutGlAccountsNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutGlAccountsInput
  create: BookCreateWithoutGlAccountsInput
  update: BookUpdateToOneWithWhereWithoutGlAccountsInput
  upsert: BookUpsertWithoutGlAccountsInput
}

input BookUpdateOneRequiredWithoutPeriodsNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutPeriodsInput
  create: BookCreateWithoutPeriodsInput
  update: BookUpdateToOneWithWhereWithoutPeriodsInput
  upsert: BookUpsertWithoutPeriodsInput
}

input BookUpdateOneRequiredWithoutTransactionLinesNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutTransactionLinesInput
  create: BookCreateWithoutTransactionLinesInput
  update: BookUpdateToOneWithWhereWithoutTransactionLinesInput
  upsert: BookUpsertWithoutTransactionLinesInput
}

input BookUpdateOneRequiredWithoutTransactionTypesNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutTransactionTypesInput
  create: BookCreateWithoutTransactionTypesInput
  update: BookUpdateToOneWithWhereWithoutTransactionTypesInput
  upsert: BookUpsertWithoutTransactionTypesInput
}

input BookUpdateOneRequiredWithoutTransactionsNestedInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutTransactionsInput
  create: BookCreateWithoutTransactionsInput
  update: BookUpdateToOneWithWhereWithoutTransactionsInput
  upsert: BookUpsertWithoutTransactionsInput
}

input BookUpdateToOneWithWhereWithoutAccountTypesInput {
  data: BookUpdateWithoutAccountTypesInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutBookEntitiesInput {
  data: BookUpdateWithoutBookEntitiesInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutConnectedBookUsersInput {
  data: BookUpdateWithoutConnectedBookUsersInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutGlAccountsInput {
  data: BookUpdateWithoutGlAccountsInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutPeriodsInput {
  data: BookUpdateWithoutPeriodsInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutTransactionLinesInput {
  data: BookUpdateWithoutTransactionLinesInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutTransactionTypesInput {
  data: BookUpdateWithoutTransactionTypesInput!
  where: BookWhereInput
}

input BookUpdateToOneWithWhereWithoutTransactionsInput {
  data: BookUpdateWithoutTransactionsInput!
  where: BookWhereInput
}

input BookUpdateWithWhereUniqueWithoutActiveCurrenciesInput {
  data: BookUpdateWithoutActiveCurrenciesInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutPrimaryCurrencyInput {
  data: BookUpdateWithoutPrimaryCurrencyInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithWhereUniqueWithoutSystemUserInput {
  data: BookUpdateWithoutSystemUserInput!
  where: BookWhereUniqueInput!
}

input BookUpdateWithoutAccountTypesInput {
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutActiveCurrenciesInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutBookEntitiesInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutConnectedBookUsersInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutGlAccountsInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutPeriodsInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutPrimaryCurrencyInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutSystemUserInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutTransactionLinesInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutTransactionTypesInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactions: TransactionUpdateManyWithoutBookNestedInput
}

input BookUpdateWithoutTransactionsInput {
  accountTypes: AccountTypeUpdateManyWithoutBookNestedInput
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  bookEntities: BookEntityUpdateManyWithoutBookNestedInput
  bookNumber: Int
  connectedBookUsers: BookUserUpdateManyWithoutBookNestedInput
  envType: BookEnvironmentType
  glAccounts: GlAccountUpdateManyWithoutBookNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
  periods: PeriodUpdateManyWithoutBookNestedInput
  primaryCurrency: CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput
  system: Boolean
  systemUser: UserUpdateOneRequiredWithoutSystemUserBooksNestedInput
  transactionLines: TransactionLineUpdateManyWithoutBookNestedInput
  transactionTypes: TransactionTypeUpdateManyWithoutBookNestedInput
}

input BookUpsertWithWhereUniqueWithoutActiveCurrenciesInput {
  create: BookCreateWithoutActiveCurrenciesInput!
  update: BookUpdateWithoutActiveCurrenciesInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutPrimaryCurrencyInput {
  create: BookCreateWithoutPrimaryCurrencyInput!
  update: BookUpdateWithoutPrimaryCurrencyInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithWhereUniqueWithoutSystemUserInput {
  create: BookCreateWithoutSystemUserInput!
  update: BookUpdateWithoutSystemUserInput!
  where: BookWhereUniqueInput!
}

input BookUpsertWithoutAccountTypesInput {
  create: BookCreateWithoutAccountTypesInput!
  update: BookUpdateWithoutAccountTypesInput!
  where: BookWhereInput
}

input BookUpsertWithoutBookEntitiesInput {
  create: BookCreateWithoutBookEntitiesInput!
  update: BookUpdateWithoutBookEntitiesInput!
  where: BookWhereInput
}

input BookUpsertWithoutConnectedBookUsersInput {
  create: BookCreateWithoutConnectedBookUsersInput!
  update: BookUpdateWithoutConnectedBookUsersInput!
  where: BookWhereInput
}

input BookUpsertWithoutGlAccountsInput {
  create: BookCreateWithoutGlAccountsInput!
  update: BookUpdateWithoutGlAccountsInput!
  where: BookWhereInput
}

input BookUpsertWithoutPeriodsInput {
  create: BookCreateWithoutPeriodsInput!
  update: BookUpdateWithoutPeriodsInput!
  where: BookWhereInput
}

input BookUpsertWithoutTransactionLinesInput {
  create: BookCreateWithoutTransactionLinesInput!
  update: BookUpdateWithoutTransactionLinesInput!
  where: BookWhereInput
}

input BookUpsertWithoutTransactionTypesInput {
  create: BookCreateWithoutTransactionTypesInput!
  update: BookUpdateWithoutTransactionTypesInput!
  where: BookWhereInput
}

input BookUpsertWithoutTransactionsInput {
  create: BookCreateWithoutTransactionsInput!
  update: BookUpdateWithoutTransactionsInput!
  where: BookWhereInput
}

type BookUser {
  book: Book!
  bookId: String!
  bookRole: Role!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  createdBookEntities: [BookEntity!]
  createdGlAccounts: [GlAccount!]
  createdPeriods: [Period!]
  createdTransactions: [Transaction!]

  """
  Generated Instance CUID
  """
  id: ID!
  isActive: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BookUserCountAggregate {
  _all: Int!
  bookId: Int!
  bookRole: Int!
  createdAt: Int!
  id: Int!
  isActive: Int!
  updatedAt: Int!
  userId: Int!
}

input BookUserCreateManyBookInput {
  bookRole: Role!
  isActive: Boolean
  userId: String!
}

input BookUserCreateManyBookInputEnvelope {
  data: [BookUserCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input BookUserCreateManyUserInput {
  bookId: String!
  bookRole: Role!
  isActive: Boolean
}

input BookUserCreateManyUserInputEnvelope {
  data: [BookUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BookUserCreateNestedManyWithoutBookInput {
  connect: [BookUserWhereUniqueInput!]
  connectOrCreate: [BookUserCreateOrConnectWithoutBookInput!]
  create: [BookUserCreateWithoutBookInput!]
  createMany: BookUserCreateManyBookInputEnvelope
}

input BookUserCreateNestedManyWithoutUserInput {
  connect: [BookUserWhereUniqueInput!]
  connectOrCreate: [BookUserCreateOrConnectWithoutUserInput!]
  create: [BookUserCreateWithoutUserInput!]
  createMany: BookUserCreateManyUserInputEnvelope
}

input BookUserCreateNestedOneWithoutCreatedBookEntitiesInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedBookEntitiesInput
  create: BookUserCreateWithoutCreatedBookEntitiesInput
}

input BookUserCreateNestedOneWithoutCreatedGlAccountsInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedGlAccountsInput
  create: BookUserCreateWithoutCreatedGlAccountsInput
}

input BookUserCreateNestedOneWithoutCreatedPeriodsInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedPeriodsInput
  create: BookUserCreateWithoutCreatedPeriodsInput
}

input BookUserCreateNestedOneWithoutCreatedTransactionsInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedTransactionsInput
  create: BookUserCreateWithoutCreatedTransactionsInput
}

input BookUserCreateOrConnectWithoutBookInput {
  create: BookUserCreateWithoutBookInput!
  where: BookUserWhereUniqueInput!
}

input BookUserCreateOrConnectWithoutCreatedBookEntitiesInput {
  create: BookUserCreateWithoutCreatedBookEntitiesInput!
  where: BookUserWhereUniqueInput!
}

input BookUserCreateOrConnectWithoutCreatedGlAccountsInput {
  create: BookUserCreateWithoutCreatedGlAccountsInput!
  where: BookUserWhereUniqueInput!
}

input BookUserCreateOrConnectWithoutCreatedPeriodsInput {
  create: BookUserCreateWithoutCreatedPeriodsInput!
  where: BookUserWhereUniqueInput!
}

input BookUserCreateOrConnectWithoutCreatedTransactionsInput {
  create: BookUserCreateWithoutCreatedTransactionsInput!
  where: BookUserWhereUniqueInput!
}

input BookUserCreateOrConnectWithoutUserInput {
  create: BookUserCreateWithoutUserInput!
  where: BookUserWhereUniqueInput!
}

input BookUserCreateWithoutBookInput {
  bookRole: Role!
  createdBookEntities: BookEntityCreateNestedManyWithoutCreatedByInput
  createdGlAccounts: GlAccountCreateNestedManyWithoutCreatedByInput
  createdPeriods: PeriodCreateNestedManyWithoutCreatedByInput
  createdTransactions: TransactionCreateNestedManyWithoutCreatedByInput
  isActive: Boolean
  user: UserCreateNestedOneWithoutConnectedBookUsersInput!
}

input BookUserCreateWithoutCreatedBookEntitiesInput {
  book: BookCreateNestedOneWithoutConnectedBookUsersInput!
  bookRole: Role!
  createdGlAccounts: GlAccountCreateNestedManyWithoutCreatedByInput
  createdPeriods: PeriodCreateNestedManyWithoutCreatedByInput
  createdTransactions: TransactionCreateNestedManyWithoutCreatedByInput
  isActive: Boolean
  user: UserCreateNestedOneWithoutConnectedBookUsersInput!
}

input BookUserCreateWithoutCreatedGlAccountsInput {
  book: BookCreateNestedOneWithoutConnectedBookUsersInput!
  bookRole: Role!
  createdBookEntities: BookEntityCreateNestedManyWithoutCreatedByInput
  createdPeriods: PeriodCreateNestedManyWithoutCreatedByInput
  createdTransactions: TransactionCreateNestedManyWithoutCreatedByInput
  isActive: Boolean
  user: UserCreateNestedOneWithoutConnectedBookUsersInput!
}

input BookUserCreateWithoutCreatedPeriodsInput {
  book: BookCreateNestedOneWithoutConnectedBookUsersInput!
  bookRole: Role!
  createdBookEntities: BookEntityCreateNestedManyWithoutCreatedByInput
  createdGlAccounts: GlAccountCreateNestedManyWithoutCreatedByInput
  createdTransactions: TransactionCreateNestedManyWithoutCreatedByInput
  isActive: Boolean
  user: UserCreateNestedOneWithoutConnectedBookUsersInput!
}

input BookUserCreateWithoutCreatedTransactionsInput {
  book: BookCreateNestedOneWithoutConnectedBookUsersInput!
  bookRole: Role!
  createdBookEntities: BookEntityCreateNestedManyWithoutCreatedByInput
  createdGlAccounts: GlAccountCreateNestedManyWithoutCreatedByInput
  createdPeriods: PeriodCreateNestedManyWithoutCreatedByInput
  isActive: Boolean
  user: UserCreateNestedOneWithoutConnectedBookUsersInput!
}

input BookUserCreateWithoutUserInput {
  book: BookCreateNestedOneWithoutConnectedBookUsersInput!
  bookRole: Role!
  createdBookEntities: BookEntityCreateNestedManyWithoutCreatedByInput
  createdGlAccounts: GlAccountCreateNestedManyWithoutCreatedByInput
  createdPeriods: PeriodCreateNestedManyWithoutCreatedByInput
  createdTransactions: TransactionCreateNestedManyWithoutCreatedByInput
  isActive: Boolean
}

input BookUserFindInput {
  bookId: String
  id: String
  userId: String
}

input BookUserListRelationFilter {
  every: BookUserWhereInput
  none: BookUserWhereInput
  some: BookUserWhereInput
}

type BookUserMaxAggregate {
  bookId: String
  bookRole: Role
  createdAt: DateTime
  id: String
  isActive: Boolean
  updatedAt: DateTime
  userId: String
}

type BookUserMinAggregate {
  bookId: String
  bookRole: Role
  createdAt: DateTime
  id: String
  isActive: Boolean
  updatedAt: DateTime
  userId: String
}

input BookUserOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookUserOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  bookRole: SortOrder
  createdAt: SortOrder
  createdBookEntities: BookEntityOrderByRelationAggregateInput
  createdGlAccounts: GlAccountOrderByRelationAggregateInput
  createdPeriods: PeriodOrderByRelationAggregateInput
  createdTransactions: TransactionOrderByRelationAggregateInput
  id: SortOrder
  isActive: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input BookUserRelationFilter {
  is: BookUserWhereInput
  isNot: BookUserWhereInput
}

enum BookUserScalarFieldEnum {
  bookId
  bookRole
  createdAt
  id
  isActive
  updatedAt
  userId
}

input BookUserScalarWhereInput {
  AND: [BookUserScalarWhereInput!]
  NOT: [BookUserScalarWhereInput!]
  OR: [BookUserScalarWhereInput!]
  bookId: StringFilter
  bookRole: EnumRoleFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BookUserUpdateManyMutationInput {
  bookRole: Role
  isActive: Boolean
}

input BookUserUpdateManyWithWhereWithoutBookInput {
  data: BookUserUpdateManyMutationInput!
  where: BookUserScalarWhereInput!
}

input BookUserUpdateManyWithWhereWithoutUserInput {
  data: BookUserUpdateManyMutationInput!
  where: BookUserScalarWhereInput!
}

input BookUserUpdateManyWithoutBookNestedInput {
  connect: [BookUserWhereUniqueInput!]
  connectOrCreate: [BookUserCreateOrConnectWithoutBookInput!]
  create: [BookUserCreateWithoutBookInput!]
  createMany: BookUserCreateManyBookInputEnvelope
  delete: [BookUserWhereUniqueInput!]
  deleteMany: [BookUserScalarWhereInput!]
  disconnect: [BookUserWhereUniqueInput!]
  set: [BookUserWhereUniqueInput!]
  update: [BookUserUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [BookUserUpdateManyWithWhereWithoutBookInput!]
  upsert: [BookUserUpsertWithWhereUniqueWithoutBookInput!]
}

input BookUserUpdateManyWithoutUserNestedInput {
  connect: [BookUserWhereUniqueInput!]
  connectOrCreate: [BookUserCreateOrConnectWithoutUserInput!]
  create: [BookUserCreateWithoutUserInput!]
  createMany: BookUserCreateManyUserInputEnvelope
  delete: [BookUserWhereUniqueInput!]
  deleteMany: [BookUserScalarWhereInput!]
  disconnect: [BookUserWhereUniqueInput!]
  set: [BookUserWhereUniqueInput!]
  update: [BookUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BookUserUpdateManyWithWhereWithoutUserInput!]
  upsert: [BookUserUpsertWithWhereUniqueWithoutUserInput!]
}

input BookUserUpdateOneRequiredWithoutCreatedBookEntitiesNestedInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedBookEntitiesInput
  create: BookUserCreateWithoutCreatedBookEntitiesInput
  update: BookUserUpdateToOneWithWhereWithoutCreatedBookEntitiesInput
  upsert: BookUserUpsertWithoutCreatedBookEntitiesInput
}

input BookUserUpdateOneRequiredWithoutCreatedGlAccountsNestedInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedGlAccountsInput
  create: BookUserCreateWithoutCreatedGlAccountsInput
  update: BookUserUpdateToOneWithWhereWithoutCreatedGlAccountsInput
  upsert: BookUserUpsertWithoutCreatedGlAccountsInput
}

input BookUserUpdateOneRequiredWithoutCreatedPeriodsNestedInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedPeriodsInput
  create: BookUserCreateWithoutCreatedPeriodsInput
  update: BookUserUpdateToOneWithWhereWithoutCreatedPeriodsInput
  upsert: BookUserUpsertWithoutCreatedPeriodsInput
}

input BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput {
  connect: BookUserWhereUniqueInput
  connectOrCreate: BookUserCreateOrConnectWithoutCreatedTransactionsInput
  create: BookUserCreateWithoutCreatedTransactionsInput
  update: BookUserUpdateToOneWithWhereWithoutCreatedTransactionsInput
  upsert: BookUserUpsertWithoutCreatedTransactionsInput
}

input BookUserUpdateToOneWithWhereWithoutCreatedBookEntitiesInput {
  data: BookUserUpdateWithoutCreatedBookEntitiesInput!
  where: BookUserWhereInput
}

input BookUserUpdateToOneWithWhereWithoutCreatedGlAccountsInput {
  data: BookUserUpdateWithoutCreatedGlAccountsInput!
  where: BookUserWhereInput
}

input BookUserUpdateToOneWithWhereWithoutCreatedPeriodsInput {
  data: BookUserUpdateWithoutCreatedPeriodsInput!
  where: BookUserWhereInput
}

input BookUserUpdateToOneWithWhereWithoutCreatedTransactionsInput {
  data: BookUserUpdateWithoutCreatedTransactionsInput!
  where: BookUserWhereInput
}

input BookUserUpdateWithWhereUniqueWithoutBookInput {
  data: BookUserUpdateWithoutBookInput!
  where: BookUserWhereUniqueInput!
}

input BookUserUpdateWithWhereUniqueWithoutUserInput {
  data: BookUserUpdateWithoutUserInput!
  where: BookUserWhereUniqueInput!
}

input BookUserUpdateWithoutBookInput {
  bookRole: Role
  createdBookEntities: BookEntityUpdateManyWithoutCreatedByNestedInput
  createdGlAccounts: GlAccountUpdateManyWithoutCreatedByNestedInput
  createdPeriods: PeriodUpdateManyWithoutCreatedByNestedInput
  createdTransactions: TransactionUpdateManyWithoutCreatedByNestedInput
  isActive: Boolean
  user: UserUpdateOneRequiredWithoutConnectedBookUsersNestedInput
}

input BookUserUpdateWithoutCreatedBookEntitiesInput {
  book: BookUpdateOneRequiredWithoutConnectedBookUsersNestedInput
  bookRole: Role
  createdGlAccounts: GlAccountUpdateManyWithoutCreatedByNestedInput
  createdPeriods: PeriodUpdateManyWithoutCreatedByNestedInput
  createdTransactions: TransactionUpdateManyWithoutCreatedByNestedInput
  isActive: Boolean
  user: UserUpdateOneRequiredWithoutConnectedBookUsersNestedInput
}

input BookUserUpdateWithoutCreatedGlAccountsInput {
  book: BookUpdateOneRequiredWithoutConnectedBookUsersNestedInput
  bookRole: Role
  createdBookEntities: BookEntityUpdateManyWithoutCreatedByNestedInput
  createdPeriods: PeriodUpdateManyWithoutCreatedByNestedInput
  createdTransactions: TransactionUpdateManyWithoutCreatedByNestedInput
  isActive: Boolean
  user: UserUpdateOneRequiredWithoutConnectedBookUsersNestedInput
}

input BookUserUpdateWithoutCreatedPeriodsInput {
  book: BookUpdateOneRequiredWithoutConnectedBookUsersNestedInput
  bookRole: Role
  createdBookEntities: BookEntityUpdateManyWithoutCreatedByNestedInput
  createdGlAccounts: GlAccountUpdateManyWithoutCreatedByNestedInput
  createdTransactions: TransactionUpdateManyWithoutCreatedByNestedInput
  isActive: Boolean
  user: UserUpdateOneRequiredWithoutConnectedBookUsersNestedInput
}

input BookUserUpdateWithoutCreatedTransactionsInput {
  book: BookUpdateOneRequiredWithoutConnectedBookUsersNestedInput
  bookRole: Role
  createdBookEntities: BookEntityUpdateManyWithoutCreatedByNestedInput
  createdGlAccounts: GlAccountUpdateManyWithoutCreatedByNestedInput
  createdPeriods: PeriodUpdateManyWithoutCreatedByNestedInput
  isActive: Boolean
  user: UserUpdateOneRequiredWithoutConnectedBookUsersNestedInput
}

input BookUserUpdateWithoutUserInput {
  book: BookUpdateOneRequiredWithoutConnectedBookUsersNestedInput
  bookRole: Role
  createdBookEntities: BookEntityUpdateManyWithoutCreatedByNestedInput
  createdGlAccounts: GlAccountUpdateManyWithoutCreatedByNestedInput
  createdPeriods: PeriodUpdateManyWithoutCreatedByNestedInput
  createdTransactions: TransactionUpdateManyWithoutCreatedByNestedInput
  isActive: Boolean
}

input BookUserUpsertWithWhereUniqueWithoutBookInput {
  create: BookUserCreateWithoutBookInput!
  update: BookUserUpdateWithoutBookInput!
  where: BookUserWhereUniqueInput!
}

input BookUserUpsertWithWhereUniqueWithoutUserInput {
  create: BookUserCreateWithoutUserInput!
  update: BookUserUpdateWithoutUserInput!
  where: BookUserWhereUniqueInput!
}

input BookUserUpsertWithoutCreatedBookEntitiesInput {
  create: BookUserCreateWithoutCreatedBookEntitiesInput!
  update: BookUserUpdateWithoutCreatedBookEntitiesInput!
  where: BookUserWhereInput
}

input BookUserUpsertWithoutCreatedGlAccountsInput {
  create: BookUserCreateWithoutCreatedGlAccountsInput!
  update: BookUserUpdateWithoutCreatedGlAccountsInput!
  where: BookUserWhereInput
}

input BookUserUpsertWithoutCreatedPeriodsInput {
  create: BookUserCreateWithoutCreatedPeriodsInput!
  update: BookUserUpdateWithoutCreatedPeriodsInput!
  where: BookUserWhereInput
}

input BookUserUpsertWithoutCreatedTransactionsInput {
  create: BookUserCreateWithoutCreatedTransactionsInput!
  update: BookUserUpdateWithoutCreatedTransactionsInput!
  where: BookUserWhereInput
}

input BookUserUserIdBookIdCompoundUniqueInput {
  bookId: String!
  userId: String!
}

input BookUserWhereInput {
  AND: [BookUserWhereInput!]
  NOT: [BookUserWhereInput!]
  OR: [BookUserWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  bookRole: EnumRoleFilter
  createdAt: DateTimeFilter
  createdBookEntities: BookEntityListRelationFilter
  createdGlAccounts: GlAccountListRelationFilter
  createdPeriods: PeriodListRelationFilter
  createdTransactions: TransactionListRelationFilter
  id: StringFilter
  isActive: BoolFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input BookUserWhereUniqueInput {
  AND: [BookUserWhereInput!]
  NOT: [BookUserWhereInput!]
  OR: [BookUserWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  bookRole: EnumRoleFilter
  createdAt: DateTimeFilter
  createdBookEntities: BookEntityListRelationFilter
  createdGlAccounts: GlAccountListRelationFilter
  createdPeriods: PeriodListRelationFilter
  createdTransactions: TransactionListRelationFilter
  id: String
  isActive: BoolFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  userId_bookId: BookUserUserIdBookIdCompoundUniqueInput
}

input BookWhereInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  accountTypes: AccountTypeListRelationFilter
  activeCurrencies: CurrencyListRelationFilter
  bookEntities: BookEntityListRelationFilter
  bookNumber: IntFilter
  connectedBookUsers: BookUserListRelationFilter
  createdAt: DateTimeFilter
  envType: EnumBookEnvironmentTypeFilter
  glAccounts: GlAccountListRelationFilter
  id: StringFilter
  isActive: BoolFilter
  isSeeded: BoolFilter
  name: StringFilter
  periods: PeriodListRelationFilter
  primaryCurrency: CurrencyRelationFilter
  primaryCurrencyCode: StringFilter
  system: BoolFilter
  systemUser: UserRelationFilter
  systemUserId: StringFilter
  transactionLines: TransactionLineListRelationFilter
  transactionTypes: TransactionTypeListRelationFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
}

input BookWhereUniqueInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  accountTypes: AccountTypeListRelationFilter
  activeCurrencies: CurrencyListRelationFilter
  bookEntities: BookEntityListRelationFilter
  bookNumber: IntFilter
  connectedBookUsers: BookUserListRelationFilter
  createdAt: DateTimeFilter
  envType: EnumBookEnvironmentTypeFilter
  glAccounts: GlAccountListRelationFilter
  id: String
  isActive: BoolFilter
  isSeeded: BoolFilter
  name: String
  periods: PeriodListRelationFilter
  primaryCurrency: CurrencyRelationFilter
  primaryCurrencyCode: StringFilter
  system: BoolFilter
  systemUser: UserRelationFilter
  systemUserId: StringFilter
  transactionLines: TransactionLineListRelationFilter
  transactionTypes: TransactionTypeListRelationFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type ConnectBookResult {
  book: BaseBookResult!
  bookId: String!
  bookRole: Role!

  """
  Generated Instance CUID
  """
  id: ID!
  userId: String!
}

type Country {
  code: String!
  countryCurrencyCode: String
  countryPrimaryCurrency: Currency

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Generated Instance CUID
  """
  id: ID!

  """
  used by top level for killing countries
  """
  isActive: Boolean!
  locale: String
  name: String!
  timezones: [String!]

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

type CountryCountAggregate {
  _all: Int!
  code: Int!
  countryCurrencyCode: Int!
  createdAt: Int!
  id: Int!
  isActive: Int!
  locale: Int!
  name: Int!
  timezones: Int!
  updatedAt: Int!
}

input CountryCreateManyCountryPrimaryCurrencyInput {
  code: String!
  isActive: Boolean
  locale: String
  name: String!
  timezones: [String!]
}

input CountryCreateManyCountryPrimaryCurrencyInputEnvelope {
  data: [CountryCreateManyCountryPrimaryCurrencyInput!]!
  skipDuplicates: Boolean
}

input CountryCreateNestedManyWithoutCountryPrimaryCurrencyInput {
  connect: [CountryWhereUniqueInput!]
  connectOrCreate: [CountryCreateOrConnectWithoutCountryPrimaryCurrencyInput!]
  create: [CountryCreateWithoutCountryPrimaryCurrencyInput!]
  createMany: CountryCreateManyCountryPrimaryCurrencyInputEnvelope
}

input CountryCreateNestedOneWithoutUsersInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutUsersInput
  create: CountryCreateWithoutUsersInput
}

input CountryCreateOrConnectWithoutCountryPrimaryCurrencyInput {
  create: CountryCreateWithoutCountryPrimaryCurrencyInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateOrConnectWithoutUsersInput {
  create: CountryCreateWithoutUsersInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateWithoutCountryPrimaryCurrencyInput {
  code: String!
  isActive: Boolean
  locale: String
  name: String!
  timezones: [String!]
  users: UserCreateNestedManyWithoutUserCountryInput
}

input CountryCreateWithoutUsersInput {
  code: String!
  countryPrimaryCurrency: CurrencyCreateNestedOneWithoutCountriesInput
  isActive: Boolean
  locale: String
  name: String!
  timezones: [String!]
}

input CountryListRelationFilter {
  every: CountryWhereInput
  none: CountryWhereInput
  some: CountryWhereInput
}

type CountryMaxAggregate {
  code: String
  countryCurrencyCode: String
  createdAt: DateTime
  id: String
  isActive: Boolean
  locale: String
  name: String
  updatedAt: DateTime
}

type CountryMinAggregate {
  code: String
  countryCurrencyCode: String
  createdAt: DateTime
  id: String
  isActive: Boolean
  locale: String
  name: String
  updatedAt: DateTime
}

input CountryOrderByRelationAggregateInput {
  _count: SortOrder
}

input CountryOrderByWithRelationInput {
  code: SortOrder
  countryCurrencyCode: SortOrderInput
  countryPrimaryCurrency: CurrencyOrderByWithRelationInput
  createdAt: SortOrder
  id: SortOrder
  isActive: SortOrder
  locale: SortOrderInput
  name: SortOrder
  timezones: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

input CountryRelationFilter {
  is: CountryWhereInput
  isNot: CountryWhereInput
}

input CountryScalarWhereInput {
  AND: [CountryScalarWhereInput!]
  NOT: [CountryScalarWhereInput!]
  OR: [CountryScalarWhereInput!]
  code: StringFilter
  countryCurrencyCode: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  locale: StringNullableFilter
  name: StringFilter
  timezones: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input CountryUpdateManyMutationInput {
  code: String
  isActive: Boolean
  locale: String
  name: String
  timezones: [String!]
}

input CountryUpdateManyWithWhereWithoutCountryPrimaryCurrencyInput {
  data: CountryUpdateManyMutationInput!
  where: CountryScalarWhereInput!
}

input CountryUpdateManyWithoutCountryPrimaryCurrencyNestedInput {
  connect: [CountryWhereUniqueInput!]
  connectOrCreate: [CountryCreateOrConnectWithoutCountryPrimaryCurrencyInput!]
  create: [CountryCreateWithoutCountryPrimaryCurrencyInput!]
  createMany: CountryCreateManyCountryPrimaryCurrencyInputEnvelope
  delete: [CountryWhereUniqueInput!]
  deleteMany: [CountryScalarWhereInput!]
  disconnect: [CountryWhereUniqueInput!]
  set: [CountryWhereUniqueInput!]
  update: [CountryUpdateWithWhereUniqueWithoutCountryPrimaryCurrencyInput!]
  updateMany: [CountryUpdateManyWithWhereWithoutCountryPrimaryCurrencyInput!]
  upsert: [CountryUpsertWithWhereUniqueWithoutCountryPrimaryCurrencyInput!]
}

input CountryUpdateOneRequiredWithoutUsersNestedInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutUsersInput
  create: CountryCreateWithoutUsersInput
  update: CountryUpdateToOneWithWhereWithoutUsersInput
  upsert: CountryUpsertWithoutUsersInput
}

input CountryUpdateToOneWithWhereWithoutUsersInput {
  data: CountryUpdateWithoutUsersInput!
  where: CountryWhereInput
}

input CountryUpdateWithWhereUniqueWithoutCountryPrimaryCurrencyInput {
  data: CountryUpdateWithoutCountryPrimaryCurrencyInput!
  where: CountryWhereUniqueInput!
}

input CountryUpdateWithoutCountryPrimaryCurrencyInput {
  code: String
  isActive: Boolean
  locale: String
  name: String
  timezones: [String!]
  users: UserUpdateManyWithoutUserCountryNestedInput
}

input CountryUpdateWithoutUsersInput {
  code: String
  countryPrimaryCurrency: CurrencyUpdateOneWithoutCountriesNestedInput
  isActive: Boolean
  locale: String
  name: String
  timezones: [String!]
}

input CountryUpsertWithWhereUniqueWithoutCountryPrimaryCurrencyInput {
  create: CountryCreateWithoutCountryPrimaryCurrencyInput!
  update: CountryUpdateWithoutCountryPrimaryCurrencyInput!
  where: CountryWhereUniqueInput!
}

input CountryUpsertWithoutUsersInput {
  create: CountryCreateWithoutUsersInput!
  update: CountryUpdateWithoutUsersInput!
  where: CountryWhereInput
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  code: StringFilter
  countryCurrencyCode: StringNullableFilter
  countryPrimaryCurrency: CurrencyNullableRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  locale: StringNullableFilter
  name: StringFilter
  timezones: StringNullableListFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input CountryWhereUniqueInput {
  AND: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  code: String
  countryCurrencyCode: StringNullableFilter
  countryPrimaryCurrency: CurrencyNullableRelationFilter
  createdAt: DateTimeFilter
  id: String
  isActive: BoolFilter
  locale: StringNullableFilter
  name: String
  timezones: StringNullableListFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

type Currency {
  code: String!
  countries: [Country!]

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  currencyFraction: String!
  currencyFractionUnits: Int!
  currencySymbol: String!

  """
  Generated Instance CUID
  """
  id: ID!

  """
  used by top level for killing currencies
  """
  isActive: Boolean!
  name: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

type CurrencyAvgAggregate {
  currencyFractionUnits: Float
}

type CurrencyCountAggregate {
  _all: Int!
  code: Int!
  createdAt: Int!
  currencyFraction: Int!
  currencyFractionUnits: Int!
  currencySymbol: Int!
  id: Int!
  isActive: Int!
  name: Int!
  updatedAt: Int!
}

input CurrencyCreateNestedManyWithoutActiveCurrencyBooksInput {
  connect: [CurrencyWhereUniqueInput!]
  connectOrCreate: [CurrencyCreateOrConnectWithoutActiveCurrencyBooksInput!]
  create: [CurrencyCreateWithoutActiveCurrencyBooksInput!]
}

input CurrencyCreateNestedOneWithoutCountriesInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutCountriesInput
  create: CurrencyCreateWithoutCountriesInput
}

input CurrencyCreateNestedOneWithoutPrimaryCurrencyBooksInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutPrimaryCurrencyBooksInput
  create: CurrencyCreateWithoutPrimaryCurrencyBooksInput
}

input CurrencyCreateNestedOneWithoutTransactionsInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutTransactionsInput
  create: CurrencyCreateWithoutTransactionsInput
}

input CurrencyCreateOrConnectWithoutActiveCurrencyBooksInput {
  create: CurrencyCreateWithoutActiveCurrencyBooksInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateOrConnectWithoutCountriesInput {
  create: CurrencyCreateWithoutCountriesInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateOrConnectWithoutPrimaryCurrencyBooksInput {
  create: CurrencyCreateWithoutPrimaryCurrencyBooksInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateOrConnectWithoutTransactionsInput {
  create: CurrencyCreateWithoutTransactionsInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateWithoutActiveCurrencyBooksInput {
  code: String!
  countries: CountryCreateNestedManyWithoutCountryPrimaryCurrencyInput
  currencyFraction: String!
  currencyFractionUnits: Int
  currencySymbol: String!
  isActive: Boolean
  name: String!
  primaryCurrencyBooks: BookCreateNestedManyWithoutPrimaryCurrencyInput
  transactions: TransactionCreateNestedManyWithoutTransactionCurrencyInput
}

input CurrencyCreateWithoutCountriesInput {
  activeCurrencyBooks: BookCreateNestedManyWithoutActiveCurrenciesInput
  code: String!
  currencyFraction: String!
  currencyFractionUnits: Int
  currencySymbol: String!
  isActive: Boolean
  name: String!
  primaryCurrencyBooks: BookCreateNestedManyWithoutPrimaryCurrencyInput
  transactions: TransactionCreateNestedManyWithoutTransactionCurrencyInput
}

input CurrencyCreateWithoutPrimaryCurrencyBooksInput {
  activeCurrencyBooks: BookCreateNestedManyWithoutActiveCurrenciesInput
  code: String!
  countries: CountryCreateNestedManyWithoutCountryPrimaryCurrencyInput
  currencyFraction: String!
  currencyFractionUnits: Int
  currencySymbol: String!
  isActive: Boolean
  name: String!
  transactions: TransactionCreateNestedManyWithoutTransactionCurrencyInput
}

input CurrencyCreateWithoutTransactionsInput {
  activeCurrencyBooks: BookCreateNestedManyWithoutActiveCurrenciesInput
  code: String!
  countries: CountryCreateNestedManyWithoutCountryPrimaryCurrencyInput
  currencyFraction: String!
  currencyFractionUnits: Int
  currencySymbol: String!
  isActive: Boolean
  name: String!
  primaryCurrencyBooks: BookCreateNestedManyWithoutPrimaryCurrencyInput
}

input CurrencyListRelationFilter {
  every: CurrencyWhereInput
  none: CurrencyWhereInput
  some: CurrencyWhereInput
}

type CurrencyMaxAggregate {
  code: String
  createdAt: DateTime
  currencyFraction: String
  currencyFractionUnits: Int
  currencySymbol: String
  id: String
  isActive: Boolean
  name: String
  updatedAt: DateTime
}

type CurrencyMinAggregate {
  code: String
  createdAt: DateTime
  currencyFraction: String
  currencyFractionUnits: Int
  currencySymbol: String
  id: String
  isActive: Boolean
  name: String
  updatedAt: DateTime
}

input CurrencyNullableRelationFilter {
  is: CurrencyWhereInput
  isNot: CurrencyWhereInput
}

input CurrencyOrderByRelationAggregateInput {
  _count: SortOrder
}

input CurrencyOrderByWithRelationInput {
  activeCurrencyBooks: BookOrderByRelationAggregateInput
  code: SortOrder
  countries: CountryOrderByRelationAggregateInput
  createdAt: SortOrder
  currencyFraction: SortOrder
  currencyFractionUnits: SortOrder
  currencySymbol: SortOrder
  id: SortOrder
  isActive: SortOrder
  name: SortOrder
  primaryCurrencyBooks: BookOrderByRelationAggregateInput
  transactions: TransactionOrderByRelationAggregateInput
}

input CurrencyRelationFilter {
  is: CurrencyWhereInput
  isNot: CurrencyWhereInput
}

enum CurrencyScalarFieldEnum {
  code
  createdAt
  currencyFraction
  currencyFractionUnits
  currencySymbol
  id
  isActive
  name
  updatedAt
}

input CurrencyScalarWhereInput {
  AND: [CurrencyScalarWhereInput!]
  NOT: [CurrencyScalarWhereInput!]
  OR: [CurrencyScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  currencyFraction: StringFilter
  currencyFractionUnits: IntFilter
  currencySymbol: StringFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
}

type CurrencySumAggregate {
  currencyFractionUnits: Int
}

input CurrencyUpdateManyMutationInput {
  code: String
  currencyFraction: String
  currencyFractionUnits: Int
  currencySymbol: String
  isActive: Boolean
  name: String
}

input CurrencyUpdateManyWithWhereWithoutActiveCurrencyBooksInput {
  data: CurrencyUpdateManyMutationInput!
  where: CurrencyScalarWhereInput!
}

input CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput {
  connect: [CurrencyWhereUniqueInput!]
  connectOrCreate: [CurrencyCreateOrConnectWithoutActiveCurrencyBooksInput!]
  create: [CurrencyCreateWithoutActiveCurrencyBooksInput!]
  delete: [CurrencyWhereUniqueInput!]
  deleteMany: [CurrencyScalarWhereInput!]
  disconnect: [CurrencyWhereUniqueInput!]
  set: [CurrencyWhereUniqueInput!]
  update: [CurrencyUpdateWithWhereUniqueWithoutActiveCurrencyBooksInput!]
  updateMany: [CurrencyUpdateManyWithWhereWithoutActiveCurrencyBooksInput!]
  upsert: [CurrencyUpsertWithWhereUniqueWithoutActiveCurrencyBooksInput!]
}

input CurrencyUpdateOneRequiredWithoutPrimaryCurrencyBooksNestedInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutPrimaryCurrencyBooksInput
  create: CurrencyCreateWithoutPrimaryCurrencyBooksInput
  update: CurrencyUpdateToOneWithWhereWithoutPrimaryCurrencyBooksInput
  upsert: CurrencyUpsertWithoutPrimaryCurrencyBooksInput
}

input CurrencyUpdateOneRequiredWithoutTransactionsNestedInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutTransactionsInput
  create: CurrencyCreateWithoutTransactionsInput
  update: CurrencyUpdateToOneWithWhereWithoutTransactionsInput
  upsert: CurrencyUpsertWithoutTransactionsInput
}

input CurrencyUpdateOneWithoutCountriesNestedInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutCountriesInput
  create: CurrencyCreateWithoutCountriesInput
  delete: CurrencyWhereInput
  disconnect: CurrencyWhereInput
  update: CurrencyUpdateToOneWithWhereWithoutCountriesInput
  upsert: CurrencyUpsertWithoutCountriesInput
}

input CurrencyUpdateToOneWithWhereWithoutCountriesInput {
  data: CurrencyUpdateWithoutCountriesInput!
  where: CurrencyWhereInput
}

input CurrencyUpdateToOneWithWhereWithoutPrimaryCurrencyBooksInput {
  data: CurrencyUpdateWithoutPrimaryCurrencyBooksInput!
  where: CurrencyWhereInput
}

input CurrencyUpdateToOneWithWhereWithoutTransactionsInput {
  data: CurrencyUpdateWithoutTransactionsInput!
  where: CurrencyWhereInput
}

input CurrencyUpdateWithWhereUniqueWithoutActiveCurrencyBooksInput {
  data: CurrencyUpdateWithoutActiveCurrencyBooksInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyUpdateWithoutActiveCurrencyBooksInput {
  code: String
  countries: CountryUpdateManyWithoutCountryPrimaryCurrencyNestedInput
  currencyFraction: String
  currencyFractionUnits: Int
  currencySymbol: String
  isActive: Boolean
  name: String
  primaryCurrencyBooks: BookUpdateManyWithoutPrimaryCurrencyNestedInput
  transactions: TransactionUpdateManyWithoutTransactionCurrencyNestedInput
}

input CurrencyUpdateWithoutCountriesInput {
  activeCurrencyBooks: BookUpdateManyWithoutActiveCurrenciesNestedInput
  code: String
  currencyFraction: String
  currencyFractionUnits: Int
  currencySymbol: String
  isActive: Boolean
  name: String
  primaryCurrencyBooks: BookUpdateManyWithoutPrimaryCurrencyNestedInput
  transactions: TransactionUpdateManyWithoutTransactionCurrencyNestedInput
}

input CurrencyUpdateWithoutPrimaryCurrencyBooksInput {
  activeCurrencyBooks: BookUpdateManyWithoutActiveCurrenciesNestedInput
  code: String
  countries: CountryUpdateManyWithoutCountryPrimaryCurrencyNestedInput
  currencyFraction: String
  currencyFractionUnits: Int
  currencySymbol: String
  isActive: Boolean
  name: String
  transactions: TransactionUpdateManyWithoutTransactionCurrencyNestedInput
}

input CurrencyUpdateWithoutTransactionsInput {
  activeCurrencyBooks: BookUpdateManyWithoutActiveCurrenciesNestedInput
  code: String
  countries: CountryUpdateManyWithoutCountryPrimaryCurrencyNestedInput
  currencyFraction: String
  currencyFractionUnits: Int
  currencySymbol: String
  isActive: Boolean
  name: String
  primaryCurrencyBooks: BookUpdateManyWithoutPrimaryCurrencyNestedInput
}

input CurrencyUpsertWithWhereUniqueWithoutActiveCurrencyBooksInput {
  create: CurrencyCreateWithoutActiveCurrencyBooksInput!
  update: CurrencyUpdateWithoutActiveCurrencyBooksInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyUpsertWithoutCountriesInput {
  create: CurrencyCreateWithoutCountriesInput!
  update: CurrencyUpdateWithoutCountriesInput!
  where: CurrencyWhereInput
}

input CurrencyUpsertWithoutPrimaryCurrencyBooksInput {
  create: CurrencyCreateWithoutPrimaryCurrencyBooksInput!
  update: CurrencyUpdateWithoutPrimaryCurrencyBooksInput!
  where: CurrencyWhereInput
}

input CurrencyUpsertWithoutTransactionsInput {
  create: CurrencyCreateWithoutTransactionsInput!
  update: CurrencyUpdateWithoutTransactionsInput!
  where: CurrencyWhereInput
}

input CurrencyWhereInput {
  AND: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  activeCurrencyBooks: BookListRelationFilter
  code: StringFilter
  countries: CountryListRelationFilter
  createdAt: DateTimeFilter
  currencyFraction: StringFilter
  currencyFractionUnits: IntFilter
  currencySymbol: StringFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  primaryCurrencyBooks: BookListRelationFilter
  transactions: TransactionListRelationFilter
}

input CurrencyWhereUniqueInput {
  AND: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  activeCurrencyBooks: BookListRelationFilter
  code: String
  countries: CountryListRelationFilter
  createdAt: DateTimeFilter
  currencyFraction: StringFilter
  currencyFractionUnits: IntFilter
  currencySymbol: StringFilter
  id: String
  isActive: BoolFilter
  name: StringFilter
  primaryCurrencyBooks: BookListRelationFilter
  transactions: TransactionListRelationFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EditAccountTypeInput {
  accountCategory: AccountTypeCategory
  name: String
}

input EditBookEntityInput {
  defaultAccountNumber: Int
  entityId: Int
  entityType: EntityType
  isActive: Boolean = true
  name: String
}

input EditBookInput {
  activeCurrencies: CurrencyUpdateManyWithoutActiveCurrencyBooksNestedInput
  isActive: Boolean
  isSeeded: Boolean
  name: String
}

input EditBookUserInput {
  bookRole: Role
  isActive: Boolean
}

input EditTransactionTypeInput {
  abbreviation: String
  name: String
  normalBalanceClass: NormalBalanceGlClass
}

enum EntityType {
  CUSTOMER
  EMPLOYER
  GENERAL
  TAX
  UTILITY
  VENDOR
}

enum EntryClass {
  INBOUND_PAYMENT
  JOURNAL
  OUTBOUND_PAYMENT
  PURCHASE
  SALE
}

input EnumAccountTypeCategoryFilter {
  equals: AccountTypeCategory
  in: [AccountTypeCategory!]
  not: NestedEnumAccountTypeCategoryFilter
  notIn: [AccountTypeCategory!]
}

input EnumBookEnvironmentTypeFilter {
  equals: BookEnvironmentType
  in: [BookEnvironmentType!]
  not: NestedEnumBookEnvironmentTypeFilter
  notIn: [BookEnvironmentType!]
}

input EnumEntityTypeFilter {
  equals: EntityType
  in: [EntityType!]
  not: NestedEnumEntityTypeFilter
  notIn: [EntityType!]
}

input EnumEntryClassFilter {
  equals: EntryClass
  in: [EntryClass!]
  not: NestedEnumEntryClassFilter
  notIn: [EntryClass!]
}

input EnumNormalBalanceGlClassFilter {
  equals: NormalBalanceGlClass
  in: [NormalBalanceGlClass!]
  not: NestedEnumNormalBalanceGlClassFilter
  notIn: [NormalBalanceGlClass!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input FindJobQueueInput {
  id: String
  key: String
  name: String
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input GeneratePeriodsInput {
  toYear: Int!
}

type GeneratedPeriodsResponse {
  bookId: String!
  createdById: String!
  existingCount: Int!

  """
  Number of Successful Results
  """
  successCount: Int!
  throughYear: Int!
}

type GlAccount {
  accountNumber: Int!
  accountType: AccountType!
  accountTypeId: String!
  book: Book!
  bookEntityDefaults: [BookEntity!]
  bookId: String!
  childAccounts: [GlAccount!]

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  createdBy: BookUser!
  createdById: String!

  """
  Generated Instance CUID
  """
  id: ID!
  isActive: Boolean!
  isExternal: Boolean!
  isSummary: Boolean!
  name: String!
  parent: GlAccount
  parentNumber: Int
  system: Boolean!
  transactionLines: [TransactionLine!]

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

type GlAccountAvgAggregate {
  accountNumber: Float
  parentNumber: Float
}

input GlAccountBookIdAccountNumberCompoundUniqueInput {
  accountNumber: Int!
  bookId: String!
}

input GlAccountBookIdNameCompoundUniqueInput {
  bookId: String!
  name: String!
}

type GlAccountCountAggregate {
  _all: Int!
  accountNumber: Int!
  accountTypeId: Int!
  bookId: Int!
  createdAt: Int!
  createdById: Int!
  id: Int!
  isActive: Int!
  isExternal: Int!
  isSummary: Int!
  name: Int!
  parentNumber: Int!
  system: Int!
  updatedAt: Int!
}

input GlAccountCreateManyAccountTypeInput {
  accountNumber: Int!
  bookId: String!
  createdById: String!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parentNumber: Int
  system: Boolean
}

input GlAccountCreateManyAccountTypeInputEnvelope {
  data: [GlAccountCreateManyAccountTypeInput!]!
  skipDuplicates: Boolean
}

input GlAccountCreateManyBookInput {
  accountNumber: Int!
  accountTypeId: String!
  createdById: String!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parentNumber: Int
  system: Boolean
}

input GlAccountCreateManyBookInputEnvelope {
  data: [GlAccountCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input GlAccountCreateManyCreatedByInput {
  accountNumber: Int!
  accountTypeId: String!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parentNumber: Int
  system: Boolean
}

input GlAccountCreateManyCreatedByInputEnvelope {
  data: [GlAccountCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input GlAccountCreateManyParentInput {
  accountNumber: Int!
  accountTypeId: String!
  createdById: String!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  system: Boolean
}

input GlAccountCreateManyParentInputEnvelope {
  data: [GlAccountCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input GlAccountCreateNestedManyWithoutAccountTypeInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutAccountTypeInput!]
  create: [GlAccountCreateWithoutAccountTypeInput!]
  createMany: GlAccountCreateManyAccountTypeInputEnvelope
}

input GlAccountCreateNestedManyWithoutBookInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutBookInput!]
  create: [GlAccountCreateWithoutBookInput!]
  createMany: GlAccountCreateManyBookInputEnvelope
}

input GlAccountCreateNestedManyWithoutCreatedByInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutCreatedByInput!]
  create: [GlAccountCreateWithoutCreatedByInput!]
  createMany: GlAccountCreateManyCreatedByInputEnvelope
}

input GlAccountCreateNestedManyWithoutParentInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutParentInput!]
  create: [GlAccountCreateWithoutParentInput!]
  createMany: GlAccountCreateManyParentInputEnvelope
}

input GlAccountCreateNestedOneWithoutBookEntityDefaultsInput {
  connect: GlAccountWhereUniqueInput
  connectOrCreate: GlAccountCreateOrConnectWithoutBookEntityDefaultsInput
  create: GlAccountCreateWithoutBookEntityDefaultsInput
}

input GlAccountCreateNestedOneWithoutChildAccountsInput {
  connect: GlAccountWhereUniqueInput
  connectOrCreate: GlAccountCreateOrConnectWithoutChildAccountsInput
  create: GlAccountCreateWithoutChildAccountsInput
}

input GlAccountCreateNestedOneWithoutTransactionLinesInput {
  connect: GlAccountWhereUniqueInput
  connectOrCreate: GlAccountCreateOrConnectWithoutTransactionLinesInput
  create: GlAccountCreateWithoutTransactionLinesInput
}

input GlAccountCreateOrConnectWithoutAccountTypeInput {
  create: GlAccountCreateWithoutAccountTypeInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountCreateOrConnectWithoutBookEntityDefaultsInput {
  create: GlAccountCreateWithoutBookEntityDefaultsInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountCreateOrConnectWithoutBookInput {
  create: GlAccountCreateWithoutBookInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountCreateOrConnectWithoutChildAccountsInput {
  create: GlAccountCreateWithoutChildAccountsInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountCreateOrConnectWithoutCreatedByInput {
  create: GlAccountCreateWithoutCreatedByInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountCreateOrConnectWithoutParentInput {
  create: GlAccountCreateWithoutParentInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountCreateOrConnectWithoutTransactionLinesInput {
  create: GlAccountCreateWithoutTransactionLinesInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountCreateWithoutAccountTypeInput {
  accountNumber: Int!
  book: BookCreateNestedOneWithoutGlAccountsInput!
  bookEntityDefaults: BookEntityCreateNestedManyWithoutDefaultAccountInput
  childAccounts: GlAccountCreateNestedManyWithoutParentInput
  createdBy: BookUserCreateNestedOneWithoutCreatedGlAccountsInput!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parent: GlAccountCreateNestedOneWithoutChildAccountsInput
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutGlAccountInput
}

input GlAccountCreateWithoutBookEntityDefaultsInput {
  accountNumber: Int!
  accountType: AccountTypeCreateNestedOneWithoutGlAccountsInput!
  book: BookCreateNestedOneWithoutGlAccountsInput!
  childAccounts: GlAccountCreateNestedManyWithoutParentInput
  createdBy: BookUserCreateNestedOneWithoutCreatedGlAccountsInput!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parent: GlAccountCreateNestedOneWithoutChildAccountsInput
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutGlAccountInput
}

input GlAccountCreateWithoutBookInput {
  accountNumber: Int!
  accountType: AccountTypeCreateNestedOneWithoutGlAccountsInput!
  bookEntityDefaults: BookEntityCreateNestedManyWithoutDefaultAccountInput
  childAccounts: GlAccountCreateNestedManyWithoutParentInput
  createdBy: BookUserCreateNestedOneWithoutCreatedGlAccountsInput!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parent: GlAccountCreateNestedOneWithoutChildAccountsInput
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutGlAccountInput
}

input GlAccountCreateWithoutChildAccountsInput {
  accountNumber: Int!
  accountType: AccountTypeCreateNestedOneWithoutGlAccountsInput!
  book: BookCreateNestedOneWithoutGlAccountsInput!
  bookEntityDefaults: BookEntityCreateNestedManyWithoutDefaultAccountInput
  createdBy: BookUserCreateNestedOneWithoutCreatedGlAccountsInput!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parent: GlAccountCreateNestedOneWithoutChildAccountsInput
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutGlAccountInput
}

input GlAccountCreateWithoutCreatedByInput {
  accountNumber: Int!
  accountType: AccountTypeCreateNestedOneWithoutGlAccountsInput!
  book: BookCreateNestedOneWithoutGlAccountsInput!
  bookEntityDefaults: BookEntityCreateNestedManyWithoutDefaultAccountInput
  childAccounts: GlAccountCreateNestedManyWithoutParentInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parent: GlAccountCreateNestedOneWithoutChildAccountsInput
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutGlAccountInput
}

input GlAccountCreateWithoutParentInput {
  accountNumber: Int!
  accountType: AccountTypeCreateNestedOneWithoutGlAccountsInput!
  book: BookCreateNestedOneWithoutGlAccountsInput!
  bookEntityDefaults: BookEntityCreateNestedManyWithoutDefaultAccountInput
  childAccounts: GlAccountCreateNestedManyWithoutParentInput
  createdBy: BookUserCreateNestedOneWithoutCreatedGlAccountsInput!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  system: Boolean
  transactionLines: TransactionLineCreateNestedManyWithoutGlAccountInput
}

input GlAccountCreateWithoutTransactionLinesInput {
  accountNumber: Int!
  accountType: AccountTypeCreateNestedOneWithoutGlAccountsInput!
  book: BookCreateNestedOneWithoutGlAccountsInput!
  bookEntityDefaults: BookEntityCreateNestedManyWithoutDefaultAccountInput
  childAccounts: GlAccountCreateNestedManyWithoutParentInput
  createdBy: BookUserCreateNestedOneWithoutCreatedGlAccountsInput!
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String!
  parent: GlAccountCreateNestedOneWithoutChildAccountsInput
  system: Boolean
}

input GlAccountIdBookIdCompoundUniqueInput {
  bookId: String!
  id: String!
}

input GlAccountListRelationFilter {
  every: GlAccountWhereInput
  none: GlAccountWhereInput
  some: GlAccountWhereInput
}

type GlAccountMaxAggregate {
  accountNumber: Int
  accountTypeId: String
  bookId: String
  createdAt: DateTime
  createdById: String
  id: String
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parentNumber: Int
  system: Boolean
  updatedAt: DateTime
}

type GlAccountMinAggregate {
  accountNumber: Int
  accountTypeId: String
  bookId: String
  createdAt: DateTime
  createdById: String
  id: String
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parentNumber: Int
  system: Boolean
  updatedAt: DateTime
}

input GlAccountNullableRelationFilter {
  is: GlAccountWhereInput
  isNot: GlAccountWhereInput
}

input GlAccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input GlAccountOrderByWithRelationInput {
  accountNumber: SortOrder
  accountType: AccountTypeOrderByWithRelationInput
  accountTypeId: SortOrder
  book: BookOrderByWithRelationInput
  bookEntityDefaults: BookEntityOrderByRelationAggregateInput
  bookId: SortOrder
  childAccounts: GlAccountOrderByRelationAggregateInput
  createdAt: SortOrder
  createdBy: BookUserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  isActive: SortOrder
  isExternal: SortOrder
  isSummary: SortOrder
  name: SortOrder
  parent: GlAccountOrderByWithRelationInput
  parentNumber: SortOrderInput
  system: SortOrder
  transactionLines: TransactionLineOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input GlAccountRelationFilter {
  is: GlAccountWhereInput
  isNot: GlAccountWhereInput
}

input GlAccountScalarWhereInput {
  AND: [GlAccountScalarWhereInput!]
  NOT: [GlAccountScalarWhereInput!]
  OR: [GlAccountScalarWhereInput!]
  accountNumber: IntFilter
  accountTypeId: StringFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  id: StringFilter
  isActive: BoolFilter
  isExternal: BoolFilter
  isSummary: BoolFilter
  name: StringFilter
  parentNumber: IntNullableFilter
  system: BoolFilter
  updatedAt: DateTimeFilter
}

type GlAccountSumAggregate {
  accountNumber: Int
  parentNumber: Int
}

input GlAccountUpdateManyMutationInput {
  accountNumber: Int
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  system: Boolean
}

input GlAccountUpdateManyWithWhereWithoutAccountTypeInput {
  data: GlAccountUpdateManyMutationInput!
  where: GlAccountScalarWhereInput!
}

input GlAccountUpdateManyWithWhereWithoutBookInput {
  data: GlAccountUpdateManyMutationInput!
  where: GlAccountScalarWhereInput!
}

input GlAccountUpdateManyWithWhereWithoutCreatedByInput {
  data: GlAccountUpdateManyMutationInput!
  where: GlAccountScalarWhereInput!
}

input GlAccountUpdateManyWithWhereWithoutParentInput {
  data: GlAccountUpdateManyMutationInput!
  where: GlAccountScalarWhereInput!
}

input GlAccountUpdateManyWithoutAccountTypeNestedInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutAccountTypeInput!]
  create: [GlAccountCreateWithoutAccountTypeInput!]
  createMany: GlAccountCreateManyAccountTypeInputEnvelope
  delete: [GlAccountWhereUniqueInput!]
  deleteMany: [GlAccountScalarWhereInput!]
  disconnect: [GlAccountWhereUniqueInput!]
  set: [GlAccountWhereUniqueInput!]
  update: [GlAccountUpdateWithWhereUniqueWithoutAccountTypeInput!]
  updateMany: [GlAccountUpdateManyWithWhereWithoutAccountTypeInput!]
  upsert: [GlAccountUpsertWithWhereUniqueWithoutAccountTypeInput!]
}

input GlAccountUpdateManyWithoutBookNestedInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutBookInput!]
  create: [GlAccountCreateWithoutBookInput!]
  createMany: GlAccountCreateManyBookInputEnvelope
  delete: [GlAccountWhereUniqueInput!]
  deleteMany: [GlAccountScalarWhereInput!]
  disconnect: [GlAccountWhereUniqueInput!]
  set: [GlAccountWhereUniqueInput!]
  update: [GlAccountUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [GlAccountUpdateManyWithWhereWithoutBookInput!]
  upsert: [GlAccountUpsertWithWhereUniqueWithoutBookInput!]
}

input GlAccountUpdateManyWithoutCreatedByNestedInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutCreatedByInput!]
  create: [GlAccountCreateWithoutCreatedByInput!]
  createMany: GlAccountCreateManyCreatedByInputEnvelope
  delete: [GlAccountWhereUniqueInput!]
  deleteMany: [GlAccountScalarWhereInput!]
  disconnect: [GlAccountWhereUniqueInput!]
  set: [GlAccountWhereUniqueInput!]
  update: [GlAccountUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [GlAccountUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [GlAccountUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input GlAccountUpdateManyWithoutParentNestedInput {
  connect: [GlAccountWhereUniqueInput!]
  connectOrCreate: [GlAccountCreateOrConnectWithoutParentInput!]
  create: [GlAccountCreateWithoutParentInput!]
  createMany: GlAccountCreateManyParentInputEnvelope
  delete: [GlAccountWhereUniqueInput!]
  deleteMany: [GlAccountScalarWhereInput!]
  disconnect: [GlAccountWhereUniqueInput!]
  set: [GlAccountWhereUniqueInput!]
  update: [GlAccountUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [GlAccountUpdateManyWithWhereWithoutParentInput!]
  upsert: [GlAccountUpsertWithWhereUniqueWithoutParentInput!]
}

input GlAccountUpdateOneRequiredWithoutTransactionLinesNestedInput {
  connect: GlAccountWhereUniqueInput
  connectOrCreate: GlAccountCreateOrConnectWithoutTransactionLinesInput
  create: GlAccountCreateWithoutTransactionLinesInput
  update: GlAccountUpdateToOneWithWhereWithoutTransactionLinesInput
  upsert: GlAccountUpsertWithoutTransactionLinesInput
}

input GlAccountUpdateOneWithoutBookEntityDefaultsNestedInput {
  connect: GlAccountWhereUniqueInput
  connectOrCreate: GlAccountCreateOrConnectWithoutBookEntityDefaultsInput
  create: GlAccountCreateWithoutBookEntityDefaultsInput
  delete: GlAccountWhereInput
  disconnect: GlAccountWhereInput
  update: GlAccountUpdateToOneWithWhereWithoutBookEntityDefaultsInput
  upsert: GlAccountUpsertWithoutBookEntityDefaultsInput
}

input GlAccountUpdateOneWithoutChildAccountsNestedInput {
  connect: GlAccountWhereUniqueInput
  connectOrCreate: GlAccountCreateOrConnectWithoutChildAccountsInput
  create: GlAccountCreateWithoutChildAccountsInput
  delete: GlAccountWhereInput
  disconnect: GlAccountWhereInput
  update: GlAccountUpdateToOneWithWhereWithoutChildAccountsInput
  upsert: GlAccountUpsertWithoutChildAccountsInput
}

input GlAccountUpdateToOneWithWhereWithoutBookEntityDefaultsInput {
  data: GlAccountUpdateWithoutBookEntityDefaultsInput!
  where: GlAccountWhereInput
}

input GlAccountUpdateToOneWithWhereWithoutChildAccountsInput {
  data: GlAccountUpdateWithoutChildAccountsInput!
  where: GlAccountWhereInput
}

input GlAccountUpdateToOneWithWhereWithoutTransactionLinesInput {
  data: GlAccountUpdateWithoutTransactionLinesInput!
  where: GlAccountWhereInput
}

input GlAccountUpdateWithWhereUniqueWithoutAccountTypeInput {
  data: GlAccountUpdateWithoutAccountTypeInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpdateWithWhereUniqueWithoutBookInput {
  data: GlAccountUpdateWithoutBookInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpdateWithWhereUniqueWithoutCreatedByInput {
  data: GlAccountUpdateWithoutCreatedByInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpdateWithWhereUniqueWithoutParentInput {
  data: GlAccountUpdateWithoutParentInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpdateWithoutAccountTypeInput {
  accountNumber: Int
  book: BookUpdateOneRequiredWithoutGlAccountsNestedInput
  bookEntityDefaults: BookEntityUpdateManyWithoutDefaultAccountNestedInput
  childAccounts: GlAccountUpdateManyWithoutParentNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedGlAccountsNestedInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parent: GlAccountUpdateOneWithoutChildAccountsNestedInput
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutGlAccountNestedInput
}

input GlAccountUpdateWithoutBookEntityDefaultsInput {
  accountNumber: Int
  accountType: AccountTypeUpdateOneRequiredWithoutGlAccountsNestedInput
  book: BookUpdateOneRequiredWithoutGlAccountsNestedInput
  childAccounts: GlAccountUpdateManyWithoutParentNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedGlAccountsNestedInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parent: GlAccountUpdateOneWithoutChildAccountsNestedInput
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutGlAccountNestedInput
}

input GlAccountUpdateWithoutBookInput {
  accountNumber: Int
  accountType: AccountTypeUpdateOneRequiredWithoutGlAccountsNestedInput
  bookEntityDefaults: BookEntityUpdateManyWithoutDefaultAccountNestedInput
  childAccounts: GlAccountUpdateManyWithoutParentNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedGlAccountsNestedInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parent: GlAccountUpdateOneWithoutChildAccountsNestedInput
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutGlAccountNestedInput
}

input GlAccountUpdateWithoutChildAccountsInput {
  accountNumber: Int
  accountType: AccountTypeUpdateOneRequiredWithoutGlAccountsNestedInput
  book: BookUpdateOneRequiredWithoutGlAccountsNestedInput
  bookEntityDefaults: BookEntityUpdateManyWithoutDefaultAccountNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedGlAccountsNestedInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parent: GlAccountUpdateOneWithoutChildAccountsNestedInput
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutGlAccountNestedInput
}

input GlAccountUpdateWithoutCreatedByInput {
  accountNumber: Int
  accountType: AccountTypeUpdateOneRequiredWithoutGlAccountsNestedInput
  book: BookUpdateOneRequiredWithoutGlAccountsNestedInput
  bookEntityDefaults: BookEntityUpdateManyWithoutDefaultAccountNestedInput
  childAccounts: GlAccountUpdateManyWithoutParentNestedInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parent: GlAccountUpdateOneWithoutChildAccountsNestedInput
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutGlAccountNestedInput
}

input GlAccountUpdateWithoutParentInput {
  accountNumber: Int
  accountType: AccountTypeUpdateOneRequiredWithoutGlAccountsNestedInput
  book: BookUpdateOneRequiredWithoutGlAccountsNestedInput
  bookEntityDefaults: BookEntityUpdateManyWithoutDefaultAccountNestedInput
  childAccounts: GlAccountUpdateManyWithoutParentNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedGlAccountsNestedInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  system: Boolean
  transactionLines: TransactionLineUpdateManyWithoutGlAccountNestedInput
}

input GlAccountUpdateWithoutTransactionLinesInput {
  accountNumber: Int
  accountType: AccountTypeUpdateOneRequiredWithoutGlAccountsNestedInput
  book: BookUpdateOneRequiredWithoutGlAccountsNestedInput
  bookEntityDefaults: BookEntityUpdateManyWithoutDefaultAccountNestedInput
  childAccounts: GlAccountUpdateManyWithoutParentNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedGlAccountsNestedInput
  isActive: Boolean
  isExternal: Boolean
  isSummary: Boolean
  name: String
  parent: GlAccountUpdateOneWithoutChildAccountsNestedInput
  system: Boolean
}

input GlAccountUpsertWithWhereUniqueWithoutAccountTypeInput {
  create: GlAccountCreateWithoutAccountTypeInput!
  update: GlAccountUpdateWithoutAccountTypeInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpsertWithWhereUniqueWithoutBookInput {
  create: GlAccountCreateWithoutBookInput!
  update: GlAccountUpdateWithoutBookInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpsertWithWhereUniqueWithoutCreatedByInput {
  create: GlAccountCreateWithoutCreatedByInput!
  update: GlAccountUpdateWithoutCreatedByInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpsertWithWhereUniqueWithoutParentInput {
  create: GlAccountCreateWithoutParentInput!
  update: GlAccountUpdateWithoutParentInput!
  where: GlAccountWhereUniqueInput!
}

input GlAccountUpsertWithoutBookEntityDefaultsInput {
  create: GlAccountCreateWithoutBookEntityDefaultsInput!
  update: GlAccountUpdateWithoutBookEntityDefaultsInput!
  where: GlAccountWhereInput
}

input GlAccountUpsertWithoutChildAccountsInput {
  create: GlAccountCreateWithoutChildAccountsInput!
  update: GlAccountUpdateWithoutChildAccountsInput!
  where: GlAccountWhereInput
}

input GlAccountUpsertWithoutTransactionLinesInput {
  create: GlAccountCreateWithoutTransactionLinesInput!
  update: GlAccountUpdateWithoutTransactionLinesInput!
  where: GlAccountWhereInput
}

input GlAccountWhereInput {
  AND: [GlAccountWhereInput!]
  NOT: [GlAccountWhereInput!]
  OR: [GlAccountWhereInput!]
  accountNumber: IntFilter
  accountType: AccountTypeRelationFilter
  accountTypeId: StringFilter
  book: BookRelationFilter
  bookEntityDefaults: BookEntityListRelationFilter
  bookId: StringFilter
  childAccounts: GlAccountListRelationFilter
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  id: StringFilter
  isActive: BoolFilter
  isExternal: BoolFilter
  isSummary: BoolFilter
  name: StringFilter
  parent: GlAccountNullableRelationFilter
  parentNumber: IntNullableFilter
  system: BoolFilter
  transactionLines: TransactionLineListRelationFilter
  updatedAt: DateTimeFilter
}

input GlAccountWhereUniqueInput {
  AND: [GlAccountWhereInput!]
  NOT: [GlAccountWhereInput!]
  OR: [GlAccountWhereInput!]
  accountNumber: IntFilter
  accountType: AccountTypeRelationFilter
  accountTypeId: StringFilter
  book: BookRelationFilter
  bookEntityDefaults: BookEntityListRelationFilter
  bookId: StringFilter
  bookId_accountNumber: GlAccountBookIdAccountNumberCompoundUniqueInput
  bookId_name: GlAccountBookIdNameCompoundUniqueInput
  childAccounts: GlAccountListRelationFilter
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  id: String
  id_bookId: GlAccountIdBookIdCompoundUniqueInput
  isActive: BoolFilter
  isExternal: BoolFilter
  isSummary: BoolFilter
  name: StringFilter
  parent: GlAccountNullableRelationFilter
  parentNumber: IntNullableFilter
  system: BoolFilter
  transactionLines: TransactionLineListRelationFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JobQueueApi {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  dailyCheck: Boolean!
  defaultMaxAttempts: Int!
  hourlyCheck: Boolean!

  """
  Generated Instance CUID
  """
  id: ID!
  instances: [JobQueueInstanceApi!]
  isBookQueue: Boolean!
  key: String!
  name: String!
  priority: Int!
  runAsUser: JobQueueApiUser!
  runAsUserId: String!
  system: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

type JobQueueApiUser {
  birthday: DateTime!
  canUseAnalyticsData: Boolean!
  connectedBookUsers: [BookUser!]
  countryCode: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  email: String!
  firstName: String!

  """
  Generated Instance CUID
  """
  id: ID!
  lastName: String!
  phoneNumber: String
  role: Role!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
  verified: Boolean!
}

type JobQueueInstanceApi {
  attempts: Int!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  createdByUserId: String!
  error: JSON
  failedAt: DateTime
  finishedAt: DateTime

  """
  Generated Instance CUID
  """
  id: ID!
  maxAttempts: Int
  notBefore: DateTime
  payload: JSON
  priority: Int!
  processedAt: DateTime
  progress: Int!
  queueKey: String!
  result: JSON
  runAt: DateTime!
  sourceId: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  email: String!

  """
  UUID From Token
  """
  uid: String!

  """
  User UUID Result
  """
  userId: ID!
}

type Mutation {
  addBookNumberToUser(input: UserConnectBookNumberInput!): [ConnectBookResult!]!
  clearActiveBook: AuthSession!
  createAccountType(input: NewAccountTypeInput!): AccountType!
  createBookEntity(input: NewBookEntityInput!): BookEntity!
  createBookUser(input: NewBookUserInput!): BookUser!
  createTransactionType(input: NewTransactionTypeInput!): TransactionType!
  generatePeriods(input: GeneratePeriodsInput!): GeneratedPeriodsResponse!
  logout: LogoutResponse!
  newProductionBook(input: NewProductionBookInput!): Book!
  refreshSession: AuthSession!
  removeAccountType(input: AccountTypeFindInput!): AccountType!
  removeBook(input: BookFindInput!): Book!
  removeBookEntity(input: BookEntityFindInput!): BookEntity!
  removeBookUser(input: BookUserFindInput!): BookUser!
  removeTransactionType(input: TransactionTypeFindInput!): TransactionType!
  seedProductionBook(id: String!): Book!
  setActiveBook(bookId: String!): AuthSession!
  signin(input: LoginInput!): SignInResponse!
  signup(data: RegisterUserInput!): User!
  triggerSystemQueues: TriggerQueuesResponse!
  updateAccountType(
    get: AccountTypeFindInput!
    input: EditAccountTypeInput!
  ): AccountType!
  updateBook(get: BookFindInput!, input: EditBookInput!): Book!
  updateBookEntity(
    get: BookEntityFindInput!
    input: EditBookEntityInput!
  ): BookEntity!
  updateBookUser(get: BookUserFindInput!, input: EditBookUserInput!): BookUser!
  updateTransactionType(
    get: TransactionTypeFindInput!
    input: EditTransactionTypeInput!
  ): TransactionType!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumAccountTypeCategoryFilter {
  equals: AccountTypeCategory
  in: [AccountTypeCategory!]
  not: NestedEnumAccountTypeCategoryFilter
  notIn: [AccountTypeCategory!]
}

input NestedEnumBookEnvironmentTypeFilter {
  equals: BookEnvironmentType
  in: [BookEnvironmentType!]
  not: NestedEnumBookEnvironmentTypeFilter
  notIn: [BookEnvironmentType!]
}

input NestedEnumEntityTypeFilter {
  equals: EntityType
  in: [EntityType!]
  not: NestedEnumEntityTypeFilter
  notIn: [EntityType!]
}

input NestedEnumEntryClassFilter {
  equals: EntryClass
  in: [EntryClass!]
  not: NestedEnumEntryClassFilter
  notIn: [EntryClass!]
}

input NestedEnumNormalBalanceGlClassFilter {
  equals: NormalBalanceGlClass
  in: [NormalBalanceGlClass!]
  not: NestedEnumNormalBalanceGlClassFilter
  notIn: [NormalBalanceGlClass!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NewAccountTypeInput {
  accountCategory: AccountTypeCategory!
  name: String!
}

input NewBookEntityInput {
  defaultAccountNumber: Int
  entityId: Int
  entityType: EntityType!
  isActive: Boolean = true
  name: String!
}

input NewBookUserInput {
  bookId: String!
  bookRole: Role!
  userId: String!
}

input NewProductionBookInput {
  bookNumber: Int
  name: String!
  primaryCurrencyCode: String!
}

input NewTransactionTypeInput {
  abbreviation: String!
  entryClass: EntryClass!
  name: String!
  normalBalanceClass: NormalBalanceGlClass!
}

enum NormalBalanceGlClass {
  CREDIT
  DEBIT
  NONE
}

enum NullsOrder {
  first
  last
}

type Period {
  book: Book!
  bookId: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  createdBy: BookUser!
  createdById: String!

  """
  Generated Instance CUID
  """
  id: ID!
  locked: Boolean!
  month: Int!
  transactions: [Transaction!]

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
  year: Int!
}

type PeriodAvgAggregate {
  month: Float
  year: Float
}

input PeriodBookIdYearMonthCompoundUniqueInput {
  bookId: String!
  month: Int!
  year: Int!
}

type PeriodCountAggregate {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  createdById: Int!
  id: Int!
  locked: Int!
  month: Int!
  updatedAt: Int!
  year: Int!
}

input PeriodCreateManyBookInput {
  createdById: String!
  locked: Boolean
  month: Int!
  year: Int!
}

input PeriodCreateManyBookInputEnvelope {
  data: [PeriodCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input PeriodCreateManyCreatedByInput {
  locked: Boolean
  month: Int!
  year: Int!
}

input PeriodCreateManyCreatedByInputEnvelope {
  data: [PeriodCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input PeriodCreateNestedManyWithoutBookInput {
  connect: [PeriodWhereUniqueInput!]
  connectOrCreate: [PeriodCreateOrConnectWithoutBookInput!]
  create: [PeriodCreateWithoutBookInput!]
  createMany: PeriodCreateManyBookInputEnvelope
}

input PeriodCreateNestedManyWithoutCreatedByInput {
  connect: [PeriodWhereUniqueInput!]
  connectOrCreate: [PeriodCreateOrConnectWithoutCreatedByInput!]
  create: [PeriodCreateWithoutCreatedByInput!]
  createMany: PeriodCreateManyCreatedByInputEnvelope
}

input PeriodCreateNestedOneWithoutTransactionsInput {
  connect: PeriodWhereUniqueInput
  connectOrCreate: PeriodCreateOrConnectWithoutTransactionsInput
  create: PeriodCreateWithoutTransactionsInput
}

input PeriodCreateOrConnectWithoutBookInput {
  create: PeriodCreateWithoutBookInput!
  where: PeriodWhereUniqueInput!
}

input PeriodCreateOrConnectWithoutCreatedByInput {
  create: PeriodCreateWithoutCreatedByInput!
  where: PeriodWhereUniqueInput!
}

input PeriodCreateOrConnectWithoutTransactionsInput {
  create: PeriodCreateWithoutTransactionsInput!
  where: PeriodWhereUniqueInput!
}

input PeriodCreateWithoutBookInput {
  createdBy: BookUserCreateNestedOneWithoutCreatedPeriodsInput!
  locked: Boolean
  month: Int!
  transactions: TransactionCreateNestedManyWithoutPostingPeriodInput
  year: Int!
}

input PeriodCreateWithoutCreatedByInput {
  book: BookCreateNestedOneWithoutPeriodsInput!
  locked: Boolean
  month: Int!
  transactions: TransactionCreateNestedManyWithoutPostingPeriodInput
  year: Int!
}

input PeriodCreateWithoutTransactionsInput {
  book: BookCreateNestedOneWithoutPeriodsInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedPeriodsInput!
  locked: Boolean
  month: Int!
  year: Int!
}

input PeriodFindInput {
  id: String
  month: Int
  year: Int
}

input PeriodListRelationFilter {
  every: PeriodWhereInput
  none: PeriodWhereInput
  some: PeriodWhereInput
}

type PeriodMaxAggregate {
  bookId: String
  createdAt: DateTime
  createdById: String
  id: String
  locked: Boolean
  month: Int
  updatedAt: DateTime
  year: Int
}

type PeriodMinAggregate {
  bookId: String
  createdAt: DateTime
  createdById: String
  id: String
  locked: Boolean
  month: Int
  updatedAt: DateTime
  year: Int
}

input PeriodOrderByRelationAggregateInput {
  _count: SortOrder
}

input PeriodOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  createdBy: BookUserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  locked: SortOrder
  month: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
  updatedAt: SortOrder
  year: SortOrder
}

input PeriodRelationFilter {
  is: PeriodWhereInput
  isNot: PeriodWhereInput
}

enum PeriodScalarFieldEnum {
  bookId
  createdAt
  createdById
  id
  locked
  month
  updatedAt
  year
}

input PeriodScalarWhereInput {
  AND: [PeriodScalarWhereInput!]
  NOT: [PeriodScalarWhereInput!]
  OR: [PeriodScalarWhereInput!]
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  id: StringFilter
  locked: BoolFilter
  month: IntFilter
  updatedAt: DateTimeFilter
  year: IntFilter
}

type PeriodSumAggregate {
  month: Int
  year: Int
}

input PeriodUpdateManyMutationInput {
  locked: Boolean
  month: Int
  year: Int
}

input PeriodUpdateManyWithWhereWithoutBookInput {
  data: PeriodUpdateManyMutationInput!
  where: PeriodScalarWhereInput!
}

input PeriodUpdateManyWithWhereWithoutCreatedByInput {
  data: PeriodUpdateManyMutationInput!
  where: PeriodScalarWhereInput!
}

input PeriodUpdateManyWithoutBookNestedInput {
  connect: [PeriodWhereUniqueInput!]
  connectOrCreate: [PeriodCreateOrConnectWithoutBookInput!]
  create: [PeriodCreateWithoutBookInput!]
  createMany: PeriodCreateManyBookInputEnvelope
  delete: [PeriodWhereUniqueInput!]
  deleteMany: [PeriodScalarWhereInput!]
  disconnect: [PeriodWhereUniqueInput!]
  set: [PeriodWhereUniqueInput!]
  update: [PeriodUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [PeriodUpdateManyWithWhereWithoutBookInput!]
  upsert: [PeriodUpsertWithWhereUniqueWithoutBookInput!]
}

input PeriodUpdateManyWithoutCreatedByNestedInput {
  connect: [PeriodWhereUniqueInput!]
  connectOrCreate: [PeriodCreateOrConnectWithoutCreatedByInput!]
  create: [PeriodCreateWithoutCreatedByInput!]
  createMany: PeriodCreateManyCreatedByInputEnvelope
  delete: [PeriodWhereUniqueInput!]
  deleteMany: [PeriodScalarWhereInput!]
  disconnect: [PeriodWhereUniqueInput!]
  set: [PeriodWhereUniqueInput!]
  update: [PeriodUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [PeriodUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [PeriodUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input PeriodUpdateOneRequiredWithoutTransactionsNestedInput {
  connect: PeriodWhereUniqueInput
  connectOrCreate: PeriodCreateOrConnectWithoutTransactionsInput
  create: PeriodCreateWithoutTransactionsInput
  update: PeriodUpdateToOneWithWhereWithoutTransactionsInput
  upsert: PeriodUpsertWithoutTransactionsInput
}

input PeriodUpdateToOneWithWhereWithoutTransactionsInput {
  data: PeriodUpdateWithoutTransactionsInput!
  where: PeriodWhereInput
}

input PeriodUpdateWithWhereUniqueWithoutBookInput {
  data: PeriodUpdateWithoutBookInput!
  where: PeriodWhereUniqueInput!
}

input PeriodUpdateWithWhereUniqueWithoutCreatedByInput {
  data: PeriodUpdateWithoutCreatedByInput!
  where: PeriodWhereUniqueInput!
}

input PeriodUpdateWithoutBookInput {
  createdBy: BookUserUpdateOneRequiredWithoutCreatedPeriodsNestedInput
  locked: Boolean
  month: Int
  transactions: TransactionUpdateManyWithoutPostingPeriodNestedInput
  year: Int
}

input PeriodUpdateWithoutCreatedByInput {
  book: BookUpdateOneRequiredWithoutPeriodsNestedInput
  locked: Boolean
  month: Int
  transactions: TransactionUpdateManyWithoutPostingPeriodNestedInput
  year: Int
}

input PeriodUpdateWithoutTransactionsInput {
  book: BookUpdateOneRequiredWithoutPeriodsNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedPeriodsNestedInput
  locked: Boolean
  month: Int
  year: Int
}

input PeriodUpsertWithWhereUniqueWithoutBookInput {
  create: PeriodCreateWithoutBookInput!
  update: PeriodUpdateWithoutBookInput!
  where: PeriodWhereUniqueInput!
}

input PeriodUpsertWithWhereUniqueWithoutCreatedByInput {
  create: PeriodCreateWithoutCreatedByInput!
  update: PeriodUpdateWithoutCreatedByInput!
  where: PeriodWhereUniqueInput!
}

input PeriodUpsertWithoutTransactionsInput {
  create: PeriodCreateWithoutTransactionsInput!
  update: PeriodUpdateWithoutTransactionsInput!
  where: PeriodWhereInput
}

input PeriodWhereInput {
  AND: [PeriodWhereInput!]
  NOT: [PeriodWhereInput!]
  OR: [PeriodWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  id: StringFilter
  locked: BoolFilter
  month: IntFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
  year: IntFilter
}

input PeriodWhereUniqueInput {
  AND: [PeriodWhereInput!]
  NOT: [PeriodWhereInput!]
  OR: [PeriodWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  bookId_year_month: PeriodBookIdYearMonthCompoundUniqueInput
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  id: String
  locked: BoolFilter
  month: IntFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
  year: IntFilter
}

type Query {
  activeBook: Book!
  book(input: BookFindInput!): Book
  books(
    cursor: BookWhereUniqueInput
    distinct: [BookScalarFieldEnum!]
    orderBy: [BookOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: BookWhereInput
  ): [Book!]!
  countries(input: CountryWhereInput!): [Country!]!
  country(input: CountryWhereUniqueInput!): Country
  currencies(
    cursor: CurrencyWhereUniqueInput
    distinct: [CurrencyScalarFieldEnum!]
    orderBy: [CurrencyOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: CurrencyWhereInput
  ): [Currency!]!
  currency(input: CurrencyWhereUniqueInput!): Currency
  currentSession: AuthSessionStatus!
  getAccountType(input: AccountTypeFindInput!): AccountType
  getBookEntity(input: BookEntityFindInput!): BookEntity
  getBookUser(input: BookUserFindInput!): BookUser
  getJobQueue(input: FindJobQueueInput!): JobQueueApi
  getPeriod(input: PeriodFindInput!): Period
  getTransactionType(input: TransactionTypeFindInput!): TransactionType
  me: User!
  searchAccountTypes(
    cursor: AccountTypeWhereUniqueInput
    distinct: [AccountTypeScalarFieldEnum!]
    orderBy: [AccountTypeOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AccountTypeWhereInput
  ): [AccountType!]!
  searchBookEntities(
    cursor: BookEntityWhereUniqueInput
    distinct: [BookEntityScalarFieldEnum!]
    orderBy: [BookEntityOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: BookEntityWhereInput
  ): [BookEntity!]!
  searchBookUsers(
    cursor: BookUserWhereUniqueInput
    distinct: [BookUserScalarFieldEnum!]
    orderBy: [BookUserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: BookUserWhereInput
  ): [BookUser!]!
  searchPeriods(
    cursor: PeriodWhereUniqueInput
    distinct: [PeriodScalarFieldEnum!]
    orderBy: [PeriodOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: PeriodWhereInput
  ): [Period!]!
  searchTransactionTypes(
    cursor: TransactionTypeWhereUniqueInput
    distinct: [TransactionTypeScalarFieldEnum!]
    orderBy: [TransactionTypeOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: TransactionTypeWhereInput
  ): [TransactionType!]!
  user(input: UserWhereUniqueInput!): User
  users(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input RegisterUserInput {
  birthday: DateTime!
  canUseAnalyticsData: Boolean
  connectBookNumber: Int = 1
  countryCode: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String
  role: Role = USER
}

enum Role {
  ADMIN
  READ_ONLY
  SYSTEM
  USER
}

type SignInResponse {
  access_token: String!
  birthday: DateTime!
  canUseAnalyticsData: Boolean!
  countryCode: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  email: String!
  firstName: String!

  """
  Generated Instance CUID
  """
  id: ID!
  lastName: String!
  refresh_token: String!
  role: Role!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Transaction {
  _count: TransactionCount!
  book: Book!
  bookId: String!
  createdAt: DateTime!
  createdBy: BookUser!
  createdById: String!
  currencyCode: String!
  exchangeRate: Float!
  id: ID!
  idReversalOf: String
  isPosted: Boolean!
  lines: [TransactionLine!]
  memo: String!
  originalDate: DateTime!
  postingMonth: Int!
  postingPeriod: Period!
  postingYear: Int!
  reversalOf: Transaction
  reversedTransaction: Transaction
  tranDate: DateTime!
  tranNumber: Int!
  transactionCurrency: Currency!
  transactionType: TransactionType!
  transactionTypeAbbreviation: String!
  updatedAt: DateTime!
}

type TransactionAvgAggregate {
  exchangeRate: Float
  postingMonth: Float
  postingYear: Float
  tranNumber: Float
}

input TransactionBookIdTranNumberCompoundUniqueInput {
  bookId: String!
  tranNumber: Int!
}

type TransactionCount {
  lines: Int!
}

type TransactionCountAggregate {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  createdById: Int!
  currencyCode: Int!
  exchangeRate: Int!
  id: Int!
  idReversalOf: Int!
  isPosted: Int!
  memo: Int!
  originalDate: Int!
  postingMonth: Int!
  postingYear: Int!
  tranDate: Int!
  tranNumber: Int!
  transactionTypeAbbreviation: Int!
  updatedAt: Int!
}

input TransactionCreateManyBookInput {
  createdById: String!
  currencyCode: String!
  exchangeRate: Float
  idReversalOf: String
  isPosted: Boolean
  memo: String!
  originalDate: DateTime!
  postingMonth: Int!
  postingYear: Int!
  tranDate: DateTime!
  tranNumber: Int
  transactionTypeAbbreviation: String!
}

input TransactionCreateManyBookInputEnvelope {
  data: [TransactionCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyCreatedByInput {
  currencyCode: String!
  exchangeRate: Float
  idReversalOf: String
  isPosted: Boolean
  memo: String!
  originalDate: DateTime!
  postingMonth: Int!
  postingYear: Int!
  tranDate: DateTime!
  tranNumber: Int
  transactionTypeAbbreviation: String!
}

input TransactionCreateManyCreatedByInputEnvelope {
  data: [TransactionCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyPostingPeriodInput {
  createdById: String!
  currencyCode: String!
  exchangeRate: Float
  idReversalOf: String
  isPosted: Boolean
  memo: String!
  originalDate: DateTime!
  tranDate: DateTime!
  tranNumber: Int
  transactionTypeAbbreviation: String!
}

input TransactionCreateManyPostingPeriodInputEnvelope {
  data: [TransactionCreateManyPostingPeriodInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyTransactionCurrencyInput {
  bookId: String!
  createdById: String!
  exchangeRate: Float
  idReversalOf: String
  isPosted: Boolean
  memo: String!
  originalDate: DateTime!
  postingMonth: Int!
  postingYear: Int!
  tranDate: DateTime!
  tranNumber: Int
  transactionTypeAbbreviation: String!
}

input TransactionCreateManyTransactionCurrencyInputEnvelope {
  data: [TransactionCreateManyTransactionCurrencyInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyTransactionTypeInput {
  createdById: String!
  currencyCode: String!
  exchangeRate: Float
  idReversalOf: String
  isPosted: Boolean
  memo: String!
  originalDate: DateTime!
  postingMonth: Int!
  postingYear: Int!
  tranDate: DateTime!
  tranNumber: Int
}

input TransactionCreateManyTransactionTypeInputEnvelope {
  data: [TransactionCreateManyTransactionTypeInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutBookInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutBookInput!]
  create: [TransactionCreateWithoutBookInput!]
  createMany: TransactionCreateManyBookInputEnvelope
}

input TransactionCreateNestedManyWithoutCreatedByInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCreatedByInput!]
  create: [TransactionCreateWithoutCreatedByInput!]
  createMany: TransactionCreateManyCreatedByInputEnvelope
}

input TransactionCreateNestedManyWithoutPostingPeriodInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutPostingPeriodInput!]
  create: [TransactionCreateWithoutPostingPeriodInput!]
  createMany: TransactionCreateManyPostingPeriodInputEnvelope
}

input TransactionCreateNestedManyWithoutTransactionCurrencyInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutTransactionCurrencyInput!]
  create: [TransactionCreateWithoutTransactionCurrencyInput!]
  createMany: TransactionCreateManyTransactionCurrencyInputEnvelope
}

input TransactionCreateNestedManyWithoutTransactionTypeInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutTransactionTypeInput!]
  create: [TransactionCreateWithoutTransactionTypeInput!]
  createMany: TransactionCreateManyTransactionTypeInputEnvelope
}

input TransactionCreateNestedOneWithoutLinesInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutLinesInput
  create: TransactionCreateWithoutLinesInput
}

input TransactionCreateNestedOneWithoutReversalOfInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutReversalOfInput
  create: TransactionCreateWithoutReversalOfInput
}

input TransactionCreateNestedOneWithoutReversedTransactionInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutReversedTransactionInput
  create: TransactionCreateWithoutReversedTransactionInput
}

input TransactionCreateOrConnectWithoutBookInput {
  create: TransactionCreateWithoutBookInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutCreatedByInput {
  create: TransactionCreateWithoutCreatedByInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutLinesInput {
  create: TransactionCreateWithoutLinesInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutPostingPeriodInput {
  create: TransactionCreateWithoutPostingPeriodInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutReversalOfInput {
  create: TransactionCreateWithoutReversalOfInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutReversedTransactionInput {
  create: TransactionCreateWithoutReversedTransactionInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutTransactionCurrencyInput {
  create: TransactionCreateWithoutTransactionCurrencyInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutTransactionTypeInput {
  create: TransactionCreateWithoutTransactionTypeInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutBookInput {
  createdBy: BookUserCreateNestedOneWithoutCreatedTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineCreateNestedManyWithoutTransactionInput
  memo: String!
  originalDate: DateTime!
  postingPeriod: PeriodCreateNestedOneWithoutTransactionsInput!
  reversalOf: TransactionCreateNestedOneWithoutReversedTransactionInput
  reversedTransaction: TransactionCreateNestedOneWithoutReversalOfInput
  tranDate: DateTime!
  tranNumber: Int
  transactionCurrency: CurrencyCreateNestedOneWithoutTransactionsInput!
  transactionType: TransactionTypeCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutCreatedByInput {
  book: BookCreateNestedOneWithoutTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineCreateNestedManyWithoutTransactionInput
  memo: String!
  originalDate: DateTime!
  postingPeriod: PeriodCreateNestedOneWithoutTransactionsInput!
  reversalOf: TransactionCreateNestedOneWithoutReversedTransactionInput
  reversedTransaction: TransactionCreateNestedOneWithoutReversalOfInput
  tranDate: DateTime!
  tranNumber: Int
  transactionCurrency: CurrencyCreateNestedOneWithoutTransactionsInput!
  transactionType: TransactionTypeCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutLinesInput {
  book: BookCreateNestedOneWithoutTransactionsInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  memo: String!
  originalDate: DateTime!
  postingPeriod: PeriodCreateNestedOneWithoutTransactionsInput!
  reversalOf: TransactionCreateNestedOneWithoutReversedTransactionInput
  reversedTransaction: TransactionCreateNestedOneWithoutReversalOfInput
  tranDate: DateTime!
  tranNumber: Int
  transactionCurrency: CurrencyCreateNestedOneWithoutTransactionsInput!
  transactionType: TransactionTypeCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutPostingPeriodInput {
  book: BookCreateNestedOneWithoutTransactionsInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineCreateNestedManyWithoutTransactionInput
  memo: String!
  originalDate: DateTime!
  reversalOf: TransactionCreateNestedOneWithoutReversedTransactionInput
  reversedTransaction: TransactionCreateNestedOneWithoutReversalOfInput
  tranDate: DateTime!
  tranNumber: Int
  transactionCurrency: CurrencyCreateNestedOneWithoutTransactionsInput!
  transactionType: TransactionTypeCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutReversalOfInput {
  book: BookCreateNestedOneWithoutTransactionsInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineCreateNestedManyWithoutTransactionInput
  memo: String!
  originalDate: DateTime!
  postingPeriod: PeriodCreateNestedOneWithoutTransactionsInput!
  reversedTransaction: TransactionCreateNestedOneWithoutReversalOfInput
  tranDate: DateTime!
  tranNumber: Int
  transactionCurrency: CurrencyCreateNestedOneWithoutTransactionsInput!
  transactionType: TransactionTypeCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutReversedTransactionInput {
  book: BookCreateNestedOneWithoutTransactionsInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineCreateNestedManyWithoutTransactionInput
  memo: String!
  originalDate: DateTime!
  postingPeriod: PeriodCreateNestedOneWithoutTransactionsInput!
  reversalOf: TransactionCreateNestedOneWithoutReversedTransactionInput
  tranDate: DateTime!
  tranNumber: Int
  transactionCurrency: CurrencyCreateNestedOneWithoutTransactionsInput!
  transactionType: TransactionTypeCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutTransactionCurrencyInput {
  book: BookCreateNestedOneWithoutTransactionsInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineCreateNestedManyWithoutTransactionInput
  memo: String!
  originalDate: DateTime!
  postingPeriod: PeriodCreateNestedOneWithoutTransactionsInput!
  reversalOf: TransactionCreateNestedOneWithoutReversedTransactionInput
  reversedTransaction: TransactionCreateNestedOneWithoutReversalOfInput
  tranDate: DateTime!
  tranNumber: Int
  transactionType: TransactionTypeCreateNestedOneWithoutTransactionsInput!
}

input TransactionCreateWithoutTransactionTypeInput {
  book: BookCreateNestedOneWithoutTransactionsInput!
  createdBy: BookUserCreateNestedOneWithoutCreatedTransactionsInput!
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineCreateNestedManyWithoutTransactionInput
  memo: String!
  originalDate: DateTime!
  postingPeriod: PeriodCreateNestedOneWithoutTransactionsInput!
  reversalOf: TransactionCreateNestedOneWithoutReversedTransactionInput
  reversedTransaction: TransactionCreateNestedOneWithoutReversalOfInput
  tranDate: DateTime!
  tranNumber: Int
  transactionCurrency: CurrencyCreateNestedOneWithoutTransactionsInput!
}

input TransactionIdBookIdCompoundUniqueInput {
  bookId: String!
  id: String!
}

type TransactionLine {
  book: Book!
  bookId: String!
  createdAt: DateTime!
  credit: Float!
  debit: Float!
  entity: BookEntity
  entityId: String
  glAccount: GlAccount!
  glAccountNumber: Int!
  id: ID!
  isReconciled: Boolean!
  lineNumber: Int!
  memo: String!
  transaction: Transaction!
  transactionId: String!
  updatedAt: DateTime!
}

type TransactionLineAvgAggregate {
  credit: Float
  debit: Float
  glAccountNumber: Float
  lineNumber: Float
}

type TransactionLineCountAggregate {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  credit: Int!
  debit: Int!
  entityId: Int!
  glAccountNumber: Int!
  id: Int!
  isReconciled: Int!
  lineNumber: Int!
  memo: Int!
  transactionId: Int!
  updatedAt: Int!
}

input TransactionLineCreateManyBookInput {
  credit: Float
  debit: Float
  entityId: String
  glAccountNumber: Int!
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
  transactionId: String!
}

input TransactionLineCreateManyBookInputEnvelope {
  data: [TransactionLineCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input TransactionLineCreateManyEntityInput {
  credit: Float
  debit: Float
  glAccountNumber: Int!
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
  transactionId: String!
}

input TransactionLineCreateManyEntityInputEnvelope {
  data: [TransactionLineCreateManyEntityInput!]!
  skipDuplicates: Boolean
}

input TransactionLineCreateManyGlAccountInput {
  credit: Float
  debit: Float
  entityId: String
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
  transactionId: String!
}

input TransactionLineCreateManyGlAccountInputEnvelope {
  data: [TransactionLineCreateManyGlAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionLineCreateManyTransactionInput {
  bookId: String!
  credit: Float
  debit: Float
  entityId: String
  glAccountNumber: Int!
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
}

input TransactionLineCreateManyTransactionInputEnvelope {
  data: [TransactionLineCreateManyTransactionInput!]!
  skipDuplicates: Boolean
}

input TransactionLineCreateNestedManyWithoutBookInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutBookInput!]
  create: [TransactionLineCreateWithoutBookInput!]
  createMany: TransactionLineCreateManyBookInputEnvelope
}

input TransactionLineCreateNestedManyWithoutEntityInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutEntityInput!]
  create: [TransactionLineCreateWithoutEntityInput!]
  createMany: TransactionLineCreateManyEntityInputEnvelope
}

input TransactionLineCreateNestedManyWithoutGlAccountInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutGlAccountInput!]
  create: [TransactionLineCreateWithoutGlAccountInput!]
  createMany: TransactionLineCreateManyGlAccountInputEnvelope
}

input TransactionLineCreateNestedManyWithoutTransactionInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutTransactionInput!]
  create: [TransactionLineCreateWithoutTransactionInput!]
  createMany: TransactionLineCreateManyTransactionInputEnvelope
}

input TransactionLineCreateOrConnectWithoutBookInput {
  create: TransactionLineCreateWithoutBookInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineCreateOrConnectWithoutEntityInput {
  create: TransactionLineCreateWithoutEntityInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineCreateOrConnectWithoutGlAccountInput {
  create: TransactionLineCreateWithoutGlAccountInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineCreateOrConnectWithoutTransactionInput {
  create: TransactionLineCreateWithoutTransactionInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineCreateWithoutBookInput {
  credit: Float
  debit: Float
  entity: BookEntityCreateNestedOneWithoutTransactionLinesInput
  glAccount: GlAccountCreateNestedOneWithoutTransactionLinesInput!
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
  transaction: TransactionCreateNestedOneWithoutLinesInput!
}

input TransactionLineCreateWithoutEntityInput {
  book: BookCreateNestedOneWithoutTransactionLinesInput!
  credit: Float
  debit: Float
  glAccount: GlAccountCreateNestedOneWithoutTransactionLinesInput!
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
  transaction: TransactionCreateNestedOneWithoutLinesInput!
}

input TransactionLineCreateWithoutGlAccountInput {
  book: BookCreateNestedOneWithoutTransactionLinesInput!
  credit: Float
  debit: Float
  entity: BookEntityCreateNestedOneWithoutTransactionLinesInput
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
  transaction: TransactionCreateNestedOneWithoutLinesInput!
}

input TransactionLineCreateWithoutTransactionInput {
  book: BookCreateNestedOneWithoutTransactionLinesInput!
  credit: Float
  debit: Float
  entity: BookEntityCreateNestedOneWithoutTransactionLinesInput
  glAccount: GlAccountCreateNestedOneWithoutTransactionLinesInput!
  isReconciled: Boolean
  lineNumber: Int!
  memo: String!
}

input TransactionLineListRelationFilter {
  every: TransactionLineWhereInput
  none: TransactionLineWhereInput
  some: TransactionLineWhereInput
}

type TransactionLineMaxAggregate {
  bookId: String
  createdAt: DateTime
  credit: Float
  debit: Float
  entityId: String
  glAccountNumber: Int
  id: String
  isReconciled: Boolean
  lineNumber: Int
  memo: String
  transactionId: String
  updatedAt: DateTime
}

type TransactionLineMinAggregate {
  bookId: String
  createdAt: DateTime
  credit: Float
  debit: Float
  entityId: String
  glAccountNumber: Int
  id: String
  isReconciled: Boolean
  lineNumber: Int
  memo: String
  transactionId: String
  updatedAt: DateTime
}

input TransactionLineOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransactionLineScalarWhereInput {
  AND: [TransactionLineScalarWhereInput!]
  NOT: [TransactionLineScalarWhereInput!]
  OR: [TransactionLineScalarWhereInput!]
  bookId: StringFilter
  createdAt: DateTimeFilter
  credit: FloatFilter
  debit: FloatFilter
  entityId: StringNullableFilter
  glAccountNumber: IntFilter
  id: StringFilter
  isReconciled: BoolFilter
  lineNumber: IntFilter
  memo: StringFilter
  transactionId: StringFilter
  updatedAt: DateTimeFilter
}

type TransactionLineSumAggregate {
  credit: Float
  debit: Float
  glAccountNumber: Int
  lineNumber: Int
}

input TransactionLineTransactionIdLineNumberCompoundUniqueInput {
  lineNumber: Int!
  transactionId: String!
}

input TransactionLineUpdateManyMutationInput {
  credit: Float
  debit: Float
  isReconciled: Boolean
  lineNumber: Int
  memo: String
}

input TransactionLineUpdateManyWithWhereWithoutBookInput {
  data: TransactionLineUpdateManyMutationInput!
  where: TransactionLineScalarWhereInput!
}

input TransactionLineUpdateManyWithWhereWithoutEntityInput {
  data: TransactionLineUpdateManyMutationInput!
  where: TransactionLineScalarWhereInput!
}

input TransactionLineUpdateManyWithWhereWithoutGlAccountInput {
  data: TransactionLineUpdateManyMutationInput!
  where: TransactionLineScalarWhereInput!
}

input TransactionLineUpdateManyWithWhereWithoutTransactionInput {
  data: TransactionLineUpdateManyMutationInput!
  where: TransactionLineScalarWhereInput!
}

input TransactionLineUpdateManyWithoutBookNestedInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutBookInput!]
  create: [TransactionLineCreateWithoutBookInput!]
  createMany: TransactionLineCreateManyBookInputEnvelope
  delete: [TransactionLineWhereUniqueInput!]
  deleteMany: [TransactionLineScalarWhereInput!]
  disconnect: [TransactionLineWhereUniqueInput!]
  set: [TransactionLineWhereUniqueInput!]
  update: [TransactionLineUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [TransactionLineUpdateManyWithWhereWithoutBookInput!]
  upsert: [TransactionLineUpsertWithWhereUniqueWithoutBookInput!]
}

input TransactionLineUpdateManyWithoutEntityNestedInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutEntityInput!]
  create: [TransactionLineCreateWithoutEntityInput!]
  createMany: TransactionLineCreateManyEntityInputEnvelope
  delete: [TransactionLineWhereUniqueInput!]
  deleteMany: [TransactionLineScalarWhereInput!]
  disconnect: [TransactionLineWhereUniqueInput!]
  set: [TransactionLineWhereUniqueInput!]
  update: [TransactionLineUpdateWithWhereUniqueWithoutEntityInput!]
  updateMany: [TransactionLineUpdateManyWithWhereWithoutEntityInput!]
  upsert: [TransactionLineUpsertWithWhereUniqueWithoutEntityInput!]
}

input TransactionLineUpdateManyWithoutGlAccountNestedInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutGlAccountInput!]
  create: [TransactionLineCreateWithoutGlAccountInput!]
  createMany: TransactionLineCreateManyGlAccountInputEnvelope
  delete: [TransactionLineWhereUniqueInput!]
  deleteMany: [TransactionLineScalarWhereInput!]
  disconnect: [TransactionLineWhereUniqueInput!]
  set: [TransactionLineWhereUniqueInput!]
  update: [TransactionLineUpdateWithWhereUniqueWithoutGlAccountInput!]
  updateMany: [TransactionLineUpdateManyWithWhereWithoutGlAccountInput!]
  upsert: [TransactionLineUpsertWithWhereUniqueWithoutGlAccountInput!]
}

input TransactionLineUpdateManyWithoutTransactionNestedInput {
  connect: [TransactionLineWhereUniqueInput!]
  connectOrCreate: [TransactionLineCreateOrConnectWithoutTransactionInput!]
  create: [TransactionLineCreateWithoutTransactionInput!]
  createMany: TransactionLineCreateManyTransactionInputEnvelope
  delete: [TransactionLineWhereUniqueInput!]
  deleteMany: [TransactionLineScalarWhereInput!]
  disconnect: [TransactionLineWhereUniqueInput!]
  set: [TransactionLineWhereUniqueInput!]
  update: [TransactionLineUpdateWithWhereUniqueWithoutTransactionInput!]
  updateMany: [TransactionLineUpdateManyWithWhereWithoutTransactionInput!]
  upsert: [TransactionLineUpsertWithWhereUniqueWithoutTransactionInput!]
}

input TransactionLineUpdateWithWhereUniqueWithoutBookInput {
  data: TransactionLineUpdateWithoutBookInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineUpdateWithWhereUniqueWithoutEntityInput {
  data: TransactionLineUpdateWithoutEntityInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineUpdateWithWhereUniqueWithoutGlAccountInput {
  data: TransactionLineUpdateWithoutGlAccountInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineUpdateWithWhereUniqueWithoutTransactionInput {
  data: TransactionLineUpdateWithoutTransactionInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineUpdateWithoutBookInput {
  credit: Float
  debit: Float
  entity: BookEntityUpdateOneWithoutTransactionLinesNestedInput
  glAccount: GlAccountUpdateOneRequiredWithoutTransactionLinesNestedInput
  isReconciled: Boolean
  lineNumber: Int
  memo: String
  transaction: TransactionUpdateOneRequiredWithoutLinesNestedInput
}

input TransactionLineUpdateWithoutEntityInput {
  book: BookUpdateOneRequiredWithoutTransactionLinesNestedInput
  credit: Float
  debit: Float
  glAccount: GlAccountUpdateOneRequiredWithoutTransactionLinesNestedInput
  isReconciled: Boolean
  lineNumber: Int
  memo: String
  transaction: TransactionUpdateOneRequiredWithoutLinesNestedInput
}

input TransactionLineUpdateWithoutGlAccountInput {
  book: BookUpdateOneRequiredWithoutTransactionLinesNestedInput
  credit: Float
  debit: Float
  entity: BookEntityUpdateOneWithoutTransactionLinesNestedInput
  isReconciled: Boolean
  lineNumber: Int
  memo: String
  transaction: TransactionUpdateOneRequiredWithoutLinesNestedInput
}

input TransactionLineUpdateWithoutTransactionInput {
  book: BookUpdateOneRequiredWithoutTransactionLinesNestedInput
  credit: Float
  debit: Float
  entity: BookEntityUpdateOneWithoutTransactionLinesNestedInput
  glAccount: GlAccountUpdateOneRequiredWithoutTransactionLinesNestedInput
  isReconciled: Boolean
  lineNumber: Int
  memo: String
}

input TransactionLineUpsertWithWhereUniqueWithoutBookInput {
  create: TransactionLineCreateWithoutBookInput!
  update: TransactionLineUpdateWithoutBookInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineUpsertWithWhereUniqueWithoutEntityInput {
  create: TransactionLineCreateWithoutEntityInput!
  update: TransactionLineUpdateWithoutEntityInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineUpsertWithWhereUniqueWithoutGlAccountInput {
  create: TransactionLineCreateWithoutGlAccountInput!
  update: TransactionLineUpdateWithoutGlAccountInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineUpsertWithWhereUniqueWithoutTransactionInput {
  create: TransactionLineCreateWithoutTransactionInput!
  update: TransactionLineUpdateWithoutTransactionInput!
  where: TransactionLineWhereUniqueInput!
}

input TransactionLineWhereInput {
  AND: [TransactionLineWhereInput!]
  NOT: [TransactionLineWhereInput!]
  OR: [TransactionLineWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  credit: FloatFilter
  debit: FloatFilter
  entity: BookEntityNullableRelationFilter
  entityId: StringNullableFilter
  glAccount: GlAccountRelationFilter
  glAccountNumber: IntFilter
  id: StringFilter
  isReconciled: BoolFilter
  lineNumber: IntFilter
  memo: StringFilter
  transaction: TransactionRelationFilter
  transactionId: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionLineWhereUniqueInput {
  AND: [TransactionLineWhereInput!]
  NOT: [TransactionLineWhereInput!]
  OR: [TransactionLineWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  credit: FloatFilter
  debit: FloatFilter
  entity: BookEntityNullableRelationFilter
  entityId: StringNullableFilter
  glAccount: GlAccountRelationFilter
  glAccountNumber: IntFilter
  id: String
  isReconciled: BoolFilter
  lineNumber: IntFilter
  memo: StringFilter
  transaction: TransactionRelationFilter
  transactionId: StringFilter
  transactionId_lineNumber: TransactionLineTransactionIdLineNumberCompoundUniqueInput
  updatedAt: DateTimeFilter
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

type TransactionMaxAggregate {
  bookId: String
  createdAt: DateTime
  createdById: String
  currencyCode: String
  exchangeRate: Float
  id: String
  idReversalOf: String
  isPosted: Boolean
  memo: String
  originalDate: DateTime
  postingMonth: Int
  postingYear: Int
  tranDate: DateTime
  tranNumber: Int
  transactionTypeAbbreviation: String
  updatedAt: DateTime
}

type TransactionMinAggregate {
  bookId: String
  createdAt: DateTime
  createdById: String
  currencyCode: String
  exchangeRate: Float
  id: String
  idReversalOf: String
  isPosted: Boolean
  memo: String
  originalDate: DateTime
  postingMonth: Int
  postingYear: Int
  tranDate: DateTime
  tranNumber: Int
  transactionTypeAbbreviation: String
  updatedAt: DateTime
}

input TransactionNullableRelationFilter {
  is: TransactionWhereInput
  isNot: TransactionWhereInput
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransactionRelationFilter {
  is: TransactionWhereInput
  isNot: TransactionWhereInput
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  currencyCode: StringFilter
  exchangeRate: FloatFilter
  id: StringFilter
  idReversalOf: StringNullableFilter
  isPosted: BoolFilter
  memo: StringFilter
  originalDate: DateTimeFilter
  postingMonth: IntFilter
  postingYear: IntFilter
  tranDate: DateTimeFilter
  tranNumber: IntFilter
  transactionTypeAbbreviation: StringFilter
  updatedAt: DateTimeFilter
}

type TransactionSumAggregate {
  exchangeRate: Float
  postingMonth: Int
  postingYear: Int
  tranNumber: Int
}

type TransactionType {
  abbreviation: String!
  book: Book!
  bookId: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  entryClass: EntryClass!

  """
  Generated Instance CUID
  """
  id: ID!
  name: String!
  normalBalanceClass: NormalBalanceGlClass!
  system: Boolean!
  transactions: [Transaction!]
  uiHidden: Boolean!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
}

input TransactionTypeAbbreviationBookIdCompoundUniqueInput {
  abbreviation: String!
  bookId: String!
}

type TransactionTypeCountAggregate {
  _all: Int!
  abbreviation: Int!
  bookId: Int!
  createdAt: Int!
  entryClass: Int!
  id: Int!
  name: Int!
  normalBalanceClass: Int!
  system: Int!
  uiHidden: Int!
  updatedAt: Int!
}

input TransactionTypeCreateManyBookInput {
  abbreviation: String!
  entryClass: EntryClass!
  name: String!
  normalBalanceClass: NormalBalanceGlClass!
  system: Boolean
  uiHidden: Boolean
}

input TransactionTypeCreateManyBookInputEnvelope {
  data: [TransactionTypeCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input TransactionTypeCreateNestedManyWithoutBookInput {
  connect: [TransactionTypeWhereUniqueInput!]
  connectOrCreate: [TransactionTypeCreateOrConnectWithoutBookInput!]
  create: [TransactionTypeCreateWithoutBookInput!]
  createMany: TransactionTypeCreateManyBookInputEnvelope
}

input TransactionTypeCreateNestedOneWithoutTransactionsInput {
  connect: TransactionTypeWhereUniqueInput
  connectOrCreate: TransactionTypeCreateOrConnectWithoutTransactionsInput
  create: TransactionTypeCreateWithoutTransactionsInput
}

input TransactionTypeCreateOrConnectWithoutBookInput {
  create: TransactionTypeCreateWithoutBookInput!
  where: TransactionTypeWhereUniqueInput!
}

input TransactionTypeCreateOrConnectWithoutTransactionsInput {
  create: TransactionTypeCreateWithoutTransactionsInput!
  where: TransactionTypeWhereUniqueInput!
}

input TransactionTypeCreateWithoutBookInput {
  abbreviation: String!
  entryClass: EntryClass!
  name: String!
  normalBalanceClass: NormalBalanceGlClass!
  system: Boolean
  transactions: TransactionCreateNestedManyWithoutTransactionTypeInput
  uiHidden: Boolean
}

input TransactionTypeCreateWithoutTransactionsInput {
  abbreviation: String!
  book: BookCreateNestedOneWithoutTransactionTypesInput!
  entryClass: EntryClass!
  name: String!
  normalBalanceClass: NormalBalanceGlClass!
  system: Boolean
  uiHidden: Boolean
}

input TransactionTypeFindInput {
  abbreviation: String
  id: String
  name: String
}

input TransactionTypeListRelationFilter {
  every: TransactionTypeWhereInput
  none: TransactionTypeWhereInput
  some: TransactionTypeWhereInput
}

type TransactionTypeMaxAggregate {
  abbreviation: String
  bookId: String
  createdAt: DateTime
  entryClass: EntryClass
  id: String
  name: String
  normalBalanceClass: NormalBalanceGlClass
  system: Boolean
  uiHidden: Boolean
  updatedAt: DateTime
}

type TransactionTypeMinAggregate {
  abbreviation: String
  bookId: String
  createdAt: DateTime
  entryClass: EntryClass
  id: String
  name: String
  normalBalanceClass: NormalBalanceGlClass
  system: Boolean
  uiHidden: Boolean
  updatedAt: DateTime
}

input TransactionTypeNameBookIdCompoundUniqueInput {
  bookId: String!
  name: String!
}

input TransactionTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransactionTypeOrderByWithRelationInput {
  abbreviation: SortOrder
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  entryClass: SortOrder
  id: SortOrder
  name: SortOrder
  normalBalanceClass: SortOrder
  system: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
  uiHidden: SortOrder
  updatedAt: SortOrder
}

input TransactionTypeRelationFilter {
  is: TransactionTypeWhereInput
  isNot: TransactionTypeWhereInput
}

enum TransactionTypeScalarFieldEnum {
  abbreviation
  bookId
  createdAt
  entryClass
  id
  name
  normalBalanceClass
  system
  uiHidden
  updatedAt
}

input TransactionTypeScalarWhereInput {
  AND: [TransactionTypeScalarWhereInput!]
  NOT: [TransactionTypeScalarWhereInput!]
  OR: [TransactionTypeScalarWhereInput!]
  abbreviation: StringFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  entryClass: EnumEntryClassFilter
  id: StringFilter
  name: StringFilter
  normalBalanceClass: EnumNormalBalanceGlClassFilter
  system: BoolFilter
  uiHidden: BoolFilter
  updatedAt: DateTimeFilter
}

input TransactionTypeUpdateManyMutationInput {
  abbreviation: String
  entryClass: EntryClass
  name: String
  normalBalanceClass: NormalBalanceGlClass
  system: Boolean
  uiHidden: Boolean
}

input TransactionTypeUpdateManyWithWhereWithoutBookInput {
  data: TransactionTypeUpdateManyMutationInput!
  where: TransactionTypeScalarWhereInput!
}

input TransactionTypeUpdateManyWithoutBookNestedInput {
  connect: [TransactionTypeWhereUniqueInput!]
  connectOrCreate: [TransactionTypeCreateOrConnectWithoutBookInput!]
  create: [TransactionTypeCreateWithoutBookInput!]
  createMany: TransactionTypeCreateManyBookInputEnvelope
  delete: [TransactionTypeWhereUniqueInput!]
  deleteMany: [TransactionTypeScalarWhereInput!]
  disconnect: [TransactionTypeWhereUniqueInput!]
  set: [TransactionTypeWhereUniqueInput!]
  update: [TransactionTypeUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [TransactionTypeUpdateManyWithWhereWithoutBookInput!]
  upsert: [TransactionTypeUpsertWithWhereUniqueWithoutBookInput!]
}

input TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput {
  connect: TransactionTypeWhereUniqueInput
  connectOrCreate: TransactionTypeCreateOrConnectWithoutTransactionsInput
  create: TransactionTypeCreateWithoutTransactionsInput
  update: TransactionTypeUpdateToOneWithWhereWithoutTransactionsInput
  upsert: TransactionTypeUpsertWithoutTransactionsInput
}

input TransactionTypeUpdateToOneWithWhereWithoutTransactionsInput {
  data: TransactionTypeUpdateWithoutTransactionsInput!
  where: TransactionTypeWhereInput
}

input TransactionTypeUpdateWithWhereUniqueWithoutBookInput {
  data: TransactionTypeUpdateWithoutBookInput!
  where: TransactionTypeWhereUniqueInput!
}

input TransactionTypeUpdateWithoutBookInput {
  abbreviation: String
  entryClass: EntryClass
  name: String
  normalBalanceClass: NormalBalanceGlClass
  system: Boolean
  transactions: TransactionUpdateManyWithoutTransactionTypeNestedInput
  uiHidden: Boolean
}

input TransactionTypeUpdateWithoutTransactionsInput {
  abbreviation: String
  book: BookUpdateOneRequiredWithoutTransactionTypesNestedInput
  entryClass: EntryClass
  name: String
  normalBalanceClass: NormalBalanceGlClass
  system: Boolean
  uiHidden: Boolean
}

input TransactionTypeUpsertWithWhereUniqueWithoutBookInput {
  create: TransactionTypeCreateWithoutBookInput!
  update: TransactionTypeUpdateWithoutBookInput!
  where: TransactionTypeWhereUniqueInput!
}

input TransactionTypeUpsertWithoutTransactionsInput {
  create: TransactionTypeCreateWithoutTransactionsInput!
  update: TransactionTypeUpdateWithoutTransactionsInput!
  where: TransactionTypeWhereInput
}

input TransactionTypeWhereInput {
  AND: [TransactionTypeWhereInput!]
  NOT: [TransactionTypeWhereInput!]
  OR: [TransactionTypeWhereInput!]
  abbreviation: StringFilter
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  entryClass: EnumEntryClassFilter
  id: StringFilter
  name: StringFilter
  normalBalanceClass: EnumNormalBalanceGlClassFilter
  system: BoolFilter
  transactions: TransactionListRelationFilter
  uiHidden: BoolFilter
  updatedAt: DateTimeFilter
}

input TransactionTypeWhereUniqueInput {
  AND: [TransactionTypeWhereInput!]
  NOT: [TransactionTypeWhereInput!]
  OR: [TransactionTypeWhereInput!]
  abbreviation: StringFilter
  abbreviation_bookId: TransactionTypeAbbreviationBookIdCompoundUniqueInput
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  entryClass: EnumEntryClassFilter
  id: String
  name: StringFilter
  name_bookId: TransactionTypeNameBookIdCompoundUniqueInput
  normalBalanceClass: EnumNormalBalanceGlClassFilter
  system: BoolFilter
  transactions: TransactionListRelationFilter
  uiHidden: BoolFilter
  updatedAt: DateTimeFilter
}

input TransactionUpdateManyMutationInput {
  exchangeRate: Float
  isPosted: Boolean
  memo: String
  originalDate: DateTime
  tranDate: DateTime
  tranNumber: Int
}

input TransactionUpdateManyWithWhereWithoutBookInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutCreatedByInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutPostingPeriodInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutTransactionCurrencyInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutTransactionTypeInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutBookNestedInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutBookInput!]
  create: [TransactionCreateWithoutBookInput!]
  createMany: TransactionCreateManyBookInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutBookInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutBookInput!]
}

input TransactionUpdateManyWithoutCreatedByNestedInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutCreatedByInput!]
  create: [TransactionCreateWithoutCreatedByInput!]
  createMany: TransactionCreateManyCreatedByInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input TransactionUpdateManyWithoutPostingPeriodNestedInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutPostingPeriodInput!]
  create: [TransactionCreateWithoutPostingPeriodInput!]
  createMany: TransactionCreateManyPostingPeriodInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutPostingPeriodInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutPostingPeriodInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutPostingPeriodInput!]
}

input TransactionUpdateManyWithoutTransactionCurrencyNestedInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutTransactionCurrencyInput!]
  create: [TransactionCreateWithoutTransactionCurrencyInput!]
  createMany: TransactionCreateManyTransactionCurrencyInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutTransactionCurrencyInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutTransactionCurrencyInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutTransactionCurrencyInput!]
}

input TransactionUpdateManyWithoutTransactionTypeNestedInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutTransactionTypeInput!]
  create: [TransactionCreateWithoutTransactionTypeInput!]
  createMany: TransactionCreateManyTransactionTypeInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutTransactionTypeInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutTransactionTypeInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutTransactionTypeInput!]
}

input TransactionUpdateOneRequiredWithoutLinesNestedInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutLinesInput
  create: TransactionCreateWithoutLinesInput
  update: TransactionUpdateToOneWithWhereWithoutLinesInput
  upsert: TransactionUpsertWithoutLinesInput
}

input TransactionUpdateOneWithoutReversalOfNestedInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutReversalOfInput
  create: TransactionCreateWithoutReversalOfInput
  delete: TransactionWhereInput
  disconnect: TransactionWhereInput
  update: TransactionUpdateToOneWithWhereWithoutReversalOfInput
  upsert: TransactionUpsertWithoutReversalOfInput
}

input TransactionUpdateOneWithoutReversedTransactionNestedInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutReversedTransactionInput
  create: TransactionCreateWithoutReversedTransactionInput
  delete: TransactionWhereInput
  disconnect: TransactionWhereInput
  update: TransactionUpdateToOneWithWhereWithoutReversedTransactionInput
  upsert: TransactionUpsertWithoutReversedTransactionInput
}

input TransactionUpdateToOneWithWhereWithoutLinesInput {
  data: TransactionUpdateWithoutLinesInput!
  where: TransactionWhereInput
}

input TransactionUpdateToOneWithWhereWithoutReversalOfInput {
  data: TransactionUpdateWithoutReversalOfInput!
  where: TransactionWhereInput
}

input TransactionUpdateToOneWithWhereWithoutReversedTransactionInput {
  data: TransactionUpdateWithoutReversedTransactionInput!
  where: TransactionWhereInput
}

input TransactionUpdateWithWhereUniqueWithoutBookInput {
  data: TransactionUpdateWithoutBookInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutCreatedByInput {
  data: TransactionUpdateWithoutCreatedByInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutPostingPeriodInput {
  data: TransactionUpdateWithoutPostingPeriodInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutTransactionCurrencyInput {
  data: TransactionUpdateWithoutTransactionCurrencyInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutTransactionTypeInput {
  data: TransactionUpdateWithoutTransactionTypeInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutBookInput {
  createdBy: BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineUpdateManyWithoutTransactionNestedInput
  memo: String
  originalDate: DateTime
  postingPeriod: PeriodUpdateOneRequiredWithoutTransactionsNestedInput
  reversalOf: TransactionUpdateOneWithoutReversedTransactionNestedInput
  reversedTransaction: TransactionUpdateOneWithoutReversalOfNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionCurrency: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  transactionType: TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutCreatedByInput {
  book: BookUpdateOneRequiredWithoutTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineUpdateManyWithoutTransactionNestedInput
  memo: String
  originalDate: DateTime
  postingPeriod: PeriodUpdateOneRequiredWithoutTransactionsNestedInput
  reversalOf: TransactionUpdateOneWithoutReversedTransactionNestedInput
  reversedTransaction: TransactionUpdateOneWithoutReversalOfNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionCurrency: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  transactionType: TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutLinesInput {
  book: BookUpdateOneRequiredWithoutTransactionsNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  memo: String
  originalDate: DateTime
  postingPeriod: PeriodUpdateOneRequiredWithoutTransactionsNestedInput
  reversalOf: TransactionUpdateOneWithoutReversedTransactionNestedInput
  reversedTransaction: TransactionUpdateOneWithoutReversalOfNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionCurrency: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  transactionType: TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutPostingPeriodInput {
  book: BookUpdateOneRequiredWithoutTransactionsNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineUpdateManyWithoutTransactionNestedInput
  memo: String
  originalDate: DateTime
  reversalOf: TransactionUpdateOneWithoutReversedTransactionNestedInput
  reversedTransaction: TransactionUpdateOneWithoutReversalOfNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionCurrency: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  transactionType: TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutReversalOfInput {
  book: BookUpdateOneRequiredWithoutTransactionsNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineUpdateManyWithoutTransactionNestedInput
  memo: String
  originalDate: DateTime
  postingPeriod: PeriodUpdateOneRequiredWithoutTransactionsNestedInput
  reversedTransaction: TransactionUpdateOneWithoutReversalOfNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionCurrency: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  transactionType: TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutReversedTransactionInput {
  book: BookUpdateOneRequiredWithoutTransactionsNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineUpdateManyWithoutTransactionNestedInput
  memo: String
  originalDate: DateTime
  postingPeriod: PeriodUpdateOneRequiredWithoutTransactionsNestedInput
  reversalOf: TransactionUpdateOneWithoutReversedTransactionNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionCurrency: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  transactionType: TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutTransactionCurrencyInput {
  book: BookUpdateOneRequiredWithoutTransactionsNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineUpdateManyWithoutTransactionNestedInput
  memo: String
  originalDate: DateTime
  postingPeriod: PeriodUpdateOneRequiredWithoutTransactionsNestedInput
  reversalOf: TransactionUpdateOneWithoutReversedTransactionNestedInput
  reversedTransaction: TransactionUpdateOneWithoutReversalOfNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionType: TransactionTypeUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutTransactionTypeInput {
  book: BookUpdateOneRequiredWithoutTransactionsNestedInput
  createdBy: BookUserUpdateOneRequiredWithoutCreatedTransactionsNestedInput
  exchangeRate: Float
  isPosted: Boolean
  lines: TransactionLineUpdateManyWithoutTransactionNestedInput
  memo: String
  originalDate: DateTime
  postingPeriod: PeriodUpdateOneRequiredWithoutTransactionsNestedInput
  reversalOf: TransactionUpdateOneWithoutReversedTransactionNestedInput
  reversedTransaction: TransactionUpdateOneWithoutReversalOfNestedInput
  tranDate: DateTime
  tranNumber: Int
  transactionCurrency: CurrencyUpdateOneRequiredWithoutTransactionsNestedInput
}

input TransactionUpsertWithWhereUniqueWithoutBookInput {
  create: TransactionCreateWithoutBookInput!
  update: TransactionUpdateWithoutBookInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutCreatedByInput {
  create: TransactionCreateWithoutCreatedByInput!
  update: TransactionUpdateWithoutCreatedByInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutPostingPeriodInput {
  create: TransactionCreateWithoutPostingPeriodInput!
  update: TransactionUpdateWithoutPostingPeriodInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutTransactionCurrencyInput {
  create: TransactionCreateWithoutTransactionCurrencyInput!
  update: TransactionUpdateWithoutTransactionCurrencyInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutTransactionTypeInput {
  create: TransactionCreateWithoutTransactionTypeInput!
  update: TransactionUpdateWithoutTransactionTypeInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithoutLinesInput {
  create: TransactionCreateWithoutLinesInput!
  update: TransactionUpdateWithoutLinesInput!
  where: TransactionWhereInput
}

input TransactionUpsertWithoutReversalOfInput {
  create: TransactionCreateWithoutReversalOfInput!
  update: TransactionUpdateWithoutReversalOfInput!
  where: TransactionWhereInput
}

input TransactionUpsertWithoutReversedTransactionInput {
  create: TransactionCreateWithoutReversedTransactionInput!
  update: TransactionUpdateWithoutReversedTransactionInput!
  where: TransactionWhereInput
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  currencyCode: StringFilter
  exchangeRate: FloatFilter
  id: StringFilter
  idReversalOf: StringNullableFilter
  isPosted: BoolFilter
  lines: TransactionLineListRelationFilter
  memo: StringFilter
  originalDate: DateTimeFilter
  postingMonth: IntFilter
  postingPeriod: PeriodRelationFilter
  postingYear: IntFilter
  reversalOf: TransactionNullableRelationFilter
  reversedTransaction: TransactionNullableRelationFilter
  tranDate: DateTimeFilter
  tranNumber: IntFilter
  transactionCurrency: CurrencyRelationFilter
  transactionType: TransactionTypeRelationFilter
  transactionTypeAbbreviation: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionWhereUniqueInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  book: BookRelationFilter
  bookId: StringFilter
  bookId_tranNumber: TransactionBookIdTranNumberCompoundUniqueInput
  createdAt: DateTimeFilter
  createdBy: BookUserRelationFilter
  createdById: StringFilter
  currencyCode: StringFilter
  exchangeRate: FloatFilter
  id: String
  idReversalOf: String
  id_bookId: TransactionIdBookIdCompoundUniqueInput
  isPosted: BoolFilter
  lines: TransactionLineListRelationFilter
  memo: StringFilter
  originalDate: DateTimeFilter
  postingMonth: IntFilter
  postingPeriod: PeriodRelationFilter
  postingYear: IntFilter
  reversalOf: TransactionNullableRelationFilter
  reversedTransaction: TransactionNullableRelationFilter
  tranDate: DateTimeFilter
  tranNumber: IntFilter
  transactionCurrency: CurrencyRelationFilter
  transactionType: TransactionTypeRelationFilter
  transactionTypeAbbreviation: StringFilter
  updatedAt: DateTimeFilter
}

type TriggerQueuesResponse {
  queueKeys: [String!]!

  """
  Number of Successful Results
  """
  successCount: Int!
}

type User {
  birthday: DateTime!
  canUseAnalyticsData: Boolean!
  connectedBookUsers: [BookUser!]
  countryCode: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!
  email: String!
  firstName: String!

  """
  Generated Instance CUID
  """
  id: ID!
  lastName: String!
  phoneNumber: String
  role: Role!
  suspended: Boolean!
  systemUserBooks: [Book!]

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!
  userCountry: Country!
  verified: Boolean!
}

input UserConnectBookNumberInput {
  bookNumber: Int!
  bookRole: Role!
}

type UserCountAggregate {
  _all: Int!
  birthday: Int!
  canUseAnalyticsData: Int!
  countryCode: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  phoneNumber: Int!
  role: Int!
  suspended: Int!
  updatedAt: Int!
  verified: Int!
}

input UserCreateManyUserCountryInput {
  birthday: DateTime!
  canUseAnalyticsData: Boolean
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String
  role: Role
  suspended: Boolean
  verified: Boolean
}

input UserCreateManyUserCountryInputEnvelope {
  data: [UserCreateManyUserCountryInput!]!
  skipDuplicates: Boolean
}

input UserCreateNestedManyWithoutUserCountryInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutUserCountryInput!]
  create: [UserCreateWithoutUserCountryInput!]
  createMany: UserCreateManyUserCountryInputEnvelope
}

input UserCreateNestedOneWithoutConnectedBookUsersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutConnectedBookUsersInput
  create: UserCreateWithoutConnectedBookUsersInput
}

input UserCreateNestedOneWithoutSystemUserBooksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSystemUserBooksInput
  create: UserCreateWithoutSystemUserBooksInput
}

input UserCreateOrConnectWithoutConnectedBookUsersInput {
  create: UserCreateWithoutConnectedBookUsersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSystemUserBooksInput {
  create: UserCreateWithoutSystemUserBooksInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserCountryInput {
  create: UserCreateWithoutUserCountryInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutConnectedBookUsersInput {
  birthday: DateTime!
  canUseAnalyticsData: Boolean
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String
  role: Role
  suspended: Boolean
  systemUserBooks: BookCreateNestedManyWithoutSystemUserInput
  userCountry: CountryCreateNestedOneWithoutUsersInput
  verified: Boolean
}

input UserCreateWithoutSystemUserBooksInput {
  birthday: DateTime!
  canUseAnalyticsData: Boolean
  connectedBookUsers: BookUserCreateNestedManyWithoutUserInput
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String
  role: Role
  suspended: Boolean
  userCountry: CountryCreateNestedOneWithoutUsersInput
  verified: Boolean
}

input UserCreateWithoutUserCountryInput {
  birthday: DateTime!
  canUseAnalyticsData: Boolean
  connectedBookUsers: BookUserCreateNestedManyWithoutUserInput
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String
  role: Role
  suspended: Boolean
  systemUserBooks: BookCreateNestedManyWithoutSystemUserInput
  verified: Boolean
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  birthday: DateTime
  canUseAnalyticsData: Boolean
  countryCode: String
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  phoneNumber: String
  role: Role
  suspended: Boolean
  updatedAt: DateTime
  verified: Boolean
}

type UserMinAggregate {
  birthday: DateTime
  canUseAnalyticsData: Boolean
  countryCode: String
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  phoneNumber: String
  role: Role
  suspended: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  birthday: SortOrder
  canUseAnalyticsData: SortOrder
  connectedBookUsers: BookUserOrderByRelationAggregateInput
  countryCode: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  phoneNumber: SortOrderInput
  role: SortOrder
  suspended: SortOrder
  systemUserBooks: BookOrderByRelationAggregateInput
  updatedAt: SortOrder
  userCountry: CountryOrderByWithRelationInput
  verified: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  birthday
  canUseAnalyticsData
  countryCode
  createdAt
  email
  firstName
  id
  lastName
  password
  phoneNumber
  role
  suspended
  updatedAt
  verified
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  birthday: DateTimeFilter
  canUseAnalyticsData: BoolFilter
  countryCode: StringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  password: StringFilter
  phoneNumber: StringNullableFilter
  role: EnumRoleFilter
  suspended: BoolFilter
  updatedAt: DateTimeFilter
  verified: BoolFilter
}

input UserUpdateManyMutationInput {
  birthday: DateTime
  canUseAnalyticsData: Boolean
  email: String
  firstName: String
  lastName: String
  password: String
  phoneNumber: String
  role: Role
  suspended: Boolean
  verified: Boolean
}

input UserUpdateManyWithWhereWithoutUserCountryInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutUserCountryNestedInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutUserCountryInput!]
  create: [UserCreateWithoutUserCountryInput!]
  createMany: UserCreateManyUserCountryInputEnvelope
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUserCountryInput!]
  updateMany: [UserUpdateManyWithWhereWithoutUserCountryInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUserCountryInput!]
}

input UserUpdateOneRequiredWithoutConnectedBookUsersNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutConnectedBookUsersInput
  create: UserCreateWithoutConnectedBookUsersInput
  update: UserUpdateToOneWithWhereWithoutConnectedBookUsersInput
  upsert: UserUpsertWithoutConnectedBookUsersInput
}

input UserUpdateOneRequiredWithoutSystemUserBooksNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSystemUserBooksInput
  create: UserCreateWithoutSystemUserBooksInput
  update: UserUpdateToOneWithWhereWithoutSystemUserBooksInput
  upsert: UserUpsertWithoutSystemUserBooksInput
}

input UserUpdateToOneWithWhereWithoutConnectedBookUsersInput {
  data: UserUpdateWithoutConnectedBookUsersInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSystemUserBooksInput {
  data: UserUpdateWithoutSystemUserBooksInput!
  where: UserWhereInput
}

input UserUpdateWithWhereUniqueWithoutUserCountryInput {
  data: UserUpdateWithoutUserCountryInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutConnectedBookUsersInput {
  birthday: DateTime
  canUseAnalyticsData: Boolean
  email: String
  firstName: String
  lastName: String
  password: String
  phoneNumber: String
  role: Role
  suspended: Boolean
  systemUserBooks: BookUpdateManyWithoutSystemUserNestedInput
  userCountry: CountryUpdateOneRequiredWithoutUsersNestedInput
  verified: Boolean
}

input UserUpdateWithoutSystemUserBooksInput {
  birthday: DateTime
  canUseAnalyticsData: Boolean
  connectedBookUsers: BookUserUpdateManyWithoutUserNestedInput
  email: String
  firstName: String
  lastName: String
  password: String
  phoneNumber: String
  role: Role
  suspended: Boolean
  userCountry: CountryUpdateOneRequiredWithoutUsersNestedInput
  verified: Boolean
}

input UserUpdateWithoutUserCountryInput {
  birthday: DateTime
  canUseAnalyticsData: Boolean
  connectedBookUsers: BookUserUpdateManyWithoutUserNestedInput
  email: String
  firstName: String
  lastName: String
  password: String
  phoneNumber: String
  role: Role
  suspended: Boolean
  systemUserBooks: BookUpdateManyWithoutSystemUserNestedInput
  verified: Boolean
}

input UserUpsertWithWhereUniqueWithoutUserCountryInput {
  create: UserCreateWithoutUserCountryInput!
  update: UserUpdateWithoutUserCountryInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutConnectedBookUsersInput {
  create: UserCreateWithoutConnectedBookUsersInput!
  update: UserUpdateWithoutConnectedBookUsersInput!
  where: UserWhereInput
}

input UserUpsertWithoutSystemUserBooksInput {
  create: UserCreateWithoutSystemUserBooksInput!
  update: UserUpdateWithoutSystemUserBooksInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  birthday: DateTimeFilter
  canUseAnalyticsData: BoolFilter
  connectedBookUsers: BookUserListRelationFilter
  countryCode: StringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  password: StringFilter
  phoneNumber: StringNullableFilter
  role: EnumRoleFilter
  suspended: BoolFilter
  systemUserBooks: BookListRelationFilter
  updatedAt: DateTimeFilter
  userCountry: CountryRelationFilter
  verified: BoolFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  birthday: DateTimeFilter
  canUseAnalyticsData: BoolFilter
  connectedBookUsers: BookUserListRelationFilter
  countryCode: StringFilter
  createdAt: DateTimeFilter
  email: String
  firstName: StringFilter
  id: String
  lastName: StringFilter
  password: StringFilter
  phoneNumber: StringNullableFilter
  role: EnumRoleFilter
  suspended: BoolFilter
  systemUserBooks: BookListRelationFilter
  updatedAt: DateTimeFilter
  userCountry: CountryRelationFilter
  verified: BoolFilter
}
